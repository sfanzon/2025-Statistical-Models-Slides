---
title: "Statistical Models"
subtitle: "Lecture 7"
from: markdown+emoji
author: 
    - name: Dr. Silvio Fanzon
      id: sf
      email: S.Fanzon@hull.ac.uk
      url: https://www.silviofanzon.com
      affiliations: University of Hull
---



::: {.content-hidden}
$
{{< include macros.tex >}}
$
:::




# Lecture 7: <br>Bootstrap &  <br> Least Squares {background-color="#cc0164" visibility="uncounted"}

::: footer

<div color="#cc0164">  </div>

:::





## Outline of Lecture 7


::: {.column width="45%"}

1. The Bootstrap
2. Bootstrap Confidence Intervals
3. Bootstrap t-test
4. Bootstrap F-test

:::


::: {.column width="45%"}

5. Lists
6. Data Frames
7. Data Entry
8. Least squares
9. Worked Example

:::




# Part 1: <br>The Bootstrap {background-color="#cc0164" visibility="uncounted"}

::: footer

<div color="#cc0164">  </div>

:::




## Motivation {.smaller}

- So far, our simulations used knowledge of the population distribution, e.g.
    * To simulate $\pi$, we sampled points from ${\rm Uniform}([-1,1] \times [-1,1])$
    * To simulate the $\chi^2$ statistic, we sampled *Multinomial* counts
    * To simulate confidence intervals, we sampled from a normal population
   


- **Problem:** Sometimes the population distribution $f$ is **unknown**

- **Bootstrap:** Replace the unknown distribution $f$ with a known distribution $\hat{f}$





## The Sample Distribution {.smaller}

::: {style="font-size: 0.94em"}

- Assume given a sample $x_1,\ldots,x_n$ from a population $f$

- The **Sample Distribution** is the discrete distribution which puts mass $\frac1n$ at each sample point
$$
\hat{f}(x) = 
\begin{cases}
\frac1n  & \quad \text{ if } \, x \in \{x_1, \ldots, x_n\} \\
0        & \quad \text{ otherwise }
\end{cases}
$$

::: Theorem 
### Glivenko-Cantelli

As the sample size increases
$$
\lim_{n \to \infty} \hat{f} = f 
$$

:::


(more precisely, the convergence is uniform almost everywhere wrt the cdfs: $\hat{F} \to F$)

:::




## Main Bootstrap idea {.smaller}

**Setting:** Assume given the **original** sample $x_1,\ldots,x_n$ from unknown population $f$



**Bootstrap:** Regard the sample as the **whole population** 

- Replace the unknown distribution $f$ with the sample distribution
$$
\hat{f}(x) = 
\begin{cases}
\frac1n  & \quad \text{ if } \, x \in \{x_1, \ldots, x_n\} \\
0        & \quad \text{ otherwise }
\end{cases}
$$

- Any sampling will be done from $\hat{f}$ $\qquad \quad$ (motivated by Glivenko-Cantelli Thm)

**Note:** $\hat{f}$ puts mass $\frac1n$ at each sample point


**Drawing an observation from $\hat f$ is equivalent to drawing one point at random from the original sample $\{x_1,\ldots,x_n\}$**







## The Bootstrap Algorithm {.smaller}

::: {style="font-size: 0.94em"}

**Setting:** Given the **original** sample $x_1,\ldots,x_n$ from unknown population $f$

**Bootstrap Algorithm:** to estimate the distribution of a statistic of interest $T$


1. Draw sample $x_1^*,\ldots,x_n^*$ from $\{x_1, \ldots, x_n\}$ with **replacement**

2. Compute the statistic $T$ on the bootstrap sample
$$
T^* = T(x_1^*,\ldots,x_n^*)
$$

3. Repeat Steps 1 and 2, $B$ times, to get $B$ bootstrap simulations of $T$
$$
T^*_1, \ldots , T^*_B
$$
These values represent the **bootstrap distribution** of $T$


**Note**: If population distribution $f$ is known, we would just sample from $f$

:::




##  {.smaller}



![](images/bootstrap.png){width=100%}



::: {style="font-size: 0.89em"}

<br>

- Original sample $\{x_1,\ldots,x_n\}$ is drawn from the population $\qquad$ (Image from [Wikipedia](https://en.wikipedia.org/wiki/Bootstrapping_(statistics)#/media/File:Illustration_bootstrap.svg))

- Resamples $\{x_1^*,\ldots,x_n^*\}$ are generated by drawing from $\{x_1,\ldots,x_n\}$ with **replacement**

- Note: Data points $x_i$ can be drawn more than once (in red and sligthly offsetted)

- For each resample, the statistic $T^*$ is calculated 

- Therefore, a histogram can be calculated to estimate the bootstrap distribution of $T$



:::




## Q \& A {.smaller}

::: {style="font-size: 0.93em"}

**References?** 

- Simulation and bootstrap are huge topics

- Good introduction: the book by Efron (inventor of bootstrap) and Tibshirani @efron


**Why is the Bootstrap useful?**

- Because a lot of the times population distribution is unknown

- Despite this, bootstrap allows to do inference on statistic $T$

**Why does the Bootstrap work?** We are just resampling from the original sample!

- It (often) works because the original sample encodes population variability

- By resampling the original sample, we are simulating this variability

:::





## Q \& A {.smaller}

::: {style="font-size: 0.93em"}


**How good is the bootstrap distribution of $T$?**

- It can be a good approximation of the true distribution of $T$ when the  
**original sample is sufficiently variable**
    * Things tend to go well for large samples ($n \geq 50$)

- Bootstrap works well when the statistic $T$ is a mean (or something like a mean)
    * for example median, regression coefficient, or standard deviation. 

- The bootstrap has difficulties when the statistic $T$ is influenced by outliers
    * for example if $T$ is the range, that is, $T =$ max value $-$ min value

:::


## Q \& A {.smaller}

::: {style="font-size: 0.93em"}

**What are the limitations of bootstrap?**

- Computationally expensive
    * For decent simulation of bootstrap distribution of $T$, need at least  
    $B = 10,000$ resamples ($100,000$ would be better!)

- Relies on a sufficiently variable original sample
    * If the original sample is not good, the bootstrap cannot recover from this problem
    * In this case the bootstrap population will not look like the true population
    * The bootstrap resampling will not be useful

- No way to determine if the original sample is good enough


**However, problems are usually mitigated by large enough original sample ($n \geq 50$)**


:::




## Example: Bootstrapping the mean {.smaller}

::: {style="font-size: 0.91em"}

**Setting:** Given the **original** sample $x_1,\ldots,x_n$ from unknown population $f$

**Bootstrap Algorithm:** to estimate the distribution of the sample mean $\overline{X}$


1. Draw sample $x_1^*,\ldots,x_n^*$ from $\{x_1, \ldots, x_n\}$ with **replacement**

2. Compute the sample mean $\overline{X}$ on the bootstrap sample
$$
\overline{X}^* = \frac{1}{n} \sum_{i=1}^n x_i^*
$$

3. Repeat Steps 1 and 2, $B$ times, to get $B$ bootstrap simulations of $\overline{X}^*$
$$
\overline{X}^*_1, \ldots , \overline{X}^*_B
$$
These values represent the **bootstrap distribution** of $\overline{X}$


:::





## Implementation in R  {.smaller}

::: {style="font-size: 0.94em"}

- Store the original sample into a vector and compute length

```r
# Store original sample and compute length

x <- c(x_1, ..., x_n)
n <- length(x)
```

- To generate one bootstrap simulation of $\overline{X}$:
    1. Sample n times from $\{x_1,\ldots,x_n\}$ with replacement
    2. This gives the bootstrap sample $\{x_1^*,\ldots,x_n^*\}$
    3. Compute sample mean of the bootstrap sample

```r
# Bootstrap sample mean one time
x.star <- sample(x, n, replace = TRUE)     # Sample n times with replacement
xbar.star <- mean(x.star)
```

:::




##  {.smaller}


::: {style="font-size: 0.94em"}

- To generate $B = 10,000$ bootstrap simulations of $\overline{X}$, use **replicate**


```r
# Bootstrap sample mean B = 10,000 times
B <- 10000

xbar.star <- replicate(B, {
                       # Generate bootstrap sample
                       x.star <- sample(x, n, replace = TRUE)
                       # Return mean of bootstrap sample
                       mean(x.star)
                      })
```
   
- The vector ``xbar.star`` contains $B = 10,000$ bootstrap samples of $\overline{X}$


**Why is this useful?:** When the population is normal $N(\mu,\sigma^2)$, we know that
$$
\overline{X} \sim N(\mu, \sigma^2/n)
$$
However: population distribution unknown $\implies$ distribution of $\overline{X}$ unknown 

**Bootstrap gives a way to estimate distribution of $\overline{X}$**

:::




## Worked Example {.smaller}

::: {style="font-size: 0.90em"}

**Original sample:** CEOs compensation in 2012 (USA data - in million dollars)

|            |     |     |     |     |     |     |     |     |     |      |
|:-----------|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:----:|
|**CEO Pay 2012**| 23.5| 6.4 | 11.1| 3.8 | 8.9 | 4.8 | 23.8| 3.0 |2.9  | 3.2  |

**We want to simulate the bootstrap distribution of the sample mean $\overline{X}$**


- To do so, we generate $B = 10,000$ bootstrap simulations of sample mean $\overline{X}$


```r
# Enter original sample and compute size
x <- c(23.5, 6.4, 11.1, 3.8, 8.9, 4.8, 23.8, 3, 2.9, 3.2)
n <- length(x)

# Bootstrap sample mean B = 10,000 times
B <- 10000

xbar.star <- replicate(B, {
                       # Generate bootstrap sample
                       x.star <- sample(x, n, replace = TRUE)
                       # Return mean of bootstrap sample
                       mean(x.star)
                      })
```

:::



## {.smaller}

::: {style="font-size: 0.90em"}

- The vector ``xbar.star`` contains $B = 10000$ bootstrap samples from $\overline{X}$

- We can examine the bootstrap distribution of $\overline{X}$ with a histogram
    * If population was normal, we would expect $\overline{X}$ to be normal
    * However $\overline{X}$ is skewed to the right $\implies$ population might not be normal

```r
hist(xbar.star)
```

:::


```{r}
set.seed(21)


# Enter original sample and compute size
x <- c(23.5, 6.4, 11.1, 3.8, 8.9, 4.8, 23.8, 3, 2.9, 3.2)
n <- length(x)

# Bootstrap sample mean B = 10,000 times
B <- 10000

xbar.star <- replicate(B, {
                       # Generate bootstrap sample
                       x.star <- sample(x, n, replace = TRUE)
                       # Return mean of bootstrap sample
                       mean(x.star)
                      })

# Plot histogram
hist(xbar.star)
```



## {.smaller}

- Plotting the density of ``x`` shows that the data is heavily skewed (not normal)

```r
plot(density(x))
```

```{r}
x <- c(23.5, 6.4, 11.1, 3.8, 8.9, 4.8, 23.8, 3, 2.9, 3.2)
plot(density(x))
```



# Part 2: <br>Bootstrap CI {background-color="#cc0164" visibility="uncounted"}

::: footer

<div color="#cc0164">  </div>

:::


## Bootstrap Confidence Intervals {.smaller}

- When the population is normally distributed $N(\mu,\sigma^2)$, we used the t-statistic
$$
t = \frac{\overline{x} - \mu}{\ese}
$$
to form a $(1-\alpha)100\%$ confidence interval $[a,b]$ for the population mean $\mu$
$$
P(\mu \in [a,b]) = 1-\alpha \,, \quad 
a, b = \overline{x} \mp t^* \times \ese , \quad  
t^* = t_{n-1}\left(\frac{\alpha}{2}\right)
$$


- If the population is not normal, the interval $[a,b]$ might not be accurate, meaning that
$$
P(\mu \in [a,b]) \neq 1 - \alpha
$$

- In this case, the bootstrap sample mean can be used to form a CI

- Moreover, bootstrap CI easily generalize to any estimator $T$



## Algorithm: Bootstrap Confidence Intervals {.smaller}

::: {style="font-size: 0.89em"}

**Setting:** Given the **original** sample $x_1,\ldots,x_n$ from unknown population $f$, and

- $\theta$ population parameter $\,\,$ (e.g. $\, \theta =$ mean), $\,\, T$ estimator for $\theta \,\,$ (e.g. $\, T =$ sample mean)


**Bootstrap CI Algorithm:** to simulate $(1-\alpha)100\%$ CI for parameter $\theta$

1. Bootstrap $B$ times the statistic $T$, obtaining the bootstrap simulations $T^*_1, \ldots , T^*_B$

2. Order the values $T^*_1, \ldots , T^*_B$ to obtain
$$
T^*_{(1)} \leq  \ldots  \leq T^*_{(B)}
$$

3. Let $\, m = [(\alpha/2)B]$, where $[\cdot]$ is the ceiling function. The **percentile bootstrap** CI for $\theta$ is
$$
\left[  T^*_{(m)}  ,  T^*_{(B + 1- m)}  \right]
$$
Endpoints are $\frac{\alpha}{2}100\%$ and $(1 − \frac{\alpha}{2})100\%$ percentiles of sample distribution of $T^*_1, \ldots , T^*_B$

:::





## Worked Example 1 {.smaller}


**Original sample:** 

- A consumer group wishes to see whether the actual mileage of a new SUV matches the advertised 17 miles per gallon

- To test the claim, the group fills the SUV’s tank and records the mileage

- This is repeated 10 times. The results are below



|       |      |      |      |      |      |      |      |      |      |      |
|-------|------|------|------|------|------|------|------|------|------|------|
|**mpg**| 11.4 | 13.1 | 14.7 | 14.7 | 15.0 | 15.5 | 15.6 | 15.9 | 16.0 | 16.8 |



**We want to simulate $95\%$ bootstrap CI for the population mean $\mu$**




## {.smaller}

- First, we generate $B = 10,000$ bootstrap simulations of sample mean $\overline{X}$


```r
# Enter original sample and compute size
x <- c(11.4, 13.1, 14.7, 14.7, 15.0, 15.5, 15.6, 15.9, 16.0, 16.8)
n <- length(x)

# Bootstrap sample mean B = 10,000 times
B <- 10000

xbar.star <- replicate(B, mean( sample(x, n, replace = TRUE) ))
```




## {.smaller}

- The vector ``xbar.star`` contains $B = 10000$ bootstrap samples from $\overline{X}$

- The $(1-\alpha)\%$ bootstrap CI for the population mean $\mu$ is
$$
\left[  \overline{X}^*_{(m)}  ,  \overline{X}^*_{(B + 1- m)}  \right]\,, \qquad m = [(\alpha/2)B]
$$

- We have $B = 10,000$ and $\alpha = 0.05 \quad \implies \quad m = 250$

- Therefore, the $95\%$ bootstrap CI for the population mean $\mu$ is
$$
\left[  \overline{X}^*_{(250)}  ,  \overline{X}^*_{(9751)}  \right]
$$ 

- These percentiles can be automatically computed using the ``quantile`` function

```r 
# Compute 95% CI from bootstrap samples
alpha <- 0.05
boot.CI <- quantile(xbar.star, probs = c(alpha/2, 1-alpha/2))
```


## {.smaller}

::: {style="font-size: 0.93em"}

- We compare the bootstrap CI to the usual t-statistic CI

```r
# Compute 95% t-statistic CI
t.stat.CI <- t.test(x)$conf.int

# Print results
cat("Bootstrap Confidence Interval (95%):", boot.CI)
cat("\nt-statistic Confidence Interval (95%):", t.stat.CI)
```

::: {style="font-size: 0.15em"}

<br>

:::

```{r}
# Enter original sample and compute size
x <- c(11.4, 13.1, 14.7, 14.7, 15.0, 15.5, 15.6, 15.9, 16.0, 16.8)
n <- length(x)

# Bootstrap sample mean B = 10,000 times
B <- 10000

xbar.star <- replicate(B, mean( sample(x, n, replace = TRUE) ))

# Compute 95% CI from bootstrap samples
alpha <- 0.05
boot.CI <- quantile(xbar.star, probs = c(alpha/2, 1-alpha/2))

# Compute 95% t-statistic CI
t.stat.CI <- t.test(x)$conf.int

# Print results
cat("Bootstrap Confidence Interval (95%):", boot.CI)
cat("\nt-statistic Confidence Interval (95%):", t.stat.CI)
```

::: {style="font-size: 0.15em"}

<br>

:::


- The CI are almost overlapping 

- This is a very strong indication that the original population is normal 
    * Indeed, this is the case: You can verify it by plotting the density of ``mpg``

- The advertised 17 mpg do not fall in either CI. We have reason to doubt the claim

- The code can be downloaded here [bootstrap_CI.R](codes/bootstrap_CI.R)


:::






## Worked Example 2 {.smaller}

**Original sample:** Compensation data for a sample of CEOs in 2012  
(USA data, in million dollars)

<br> 

|            |     |     |     |     |     |     |     |     |     |      |
|:-----------|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:----:|
|**CEO Pay 2012**| 23.5| 6.4 | 11.1| 3.8 | 8.9 | 4.8 | 23.8| 3.0 |2.9  | 3.2  |

<br>

**We want to simulate $95\%$ bootstrap CI for the mean compensation $\mu$**


##  {.smaller}

```r
ceo12 <- c(23.5, 6.4, 11.1, 3.8, 8.9, 4.8, 23.8, 3, 2.9, 3.2)
plot(density(ceo12))
```

```{r}
ceo12 <- c(23.5, 6.4, 11.1, 3.8, 8.9, 4.8, 23.8, 3, 2.9, 3.2)
plot(density(ceo12))
```

- Plotting the density of ``ceo12``, we see that the data is not normal
    * Therefore, CI based on t-statistic would **not be appropriate**
    * Need to compute a Bootstrap CI for $\mu$




##  {.smaller}



- Running the code [bootstrap_CI.R](codes/bootstrap_CI.R) on the new data, we get

::: {style="font-size: 0.15em"}

<br>

:::

```{r}
#| echo: true
#| code-fold: true
#| code-summary: "View the R Code"

# Enter original sample and compute size
x <- c(23.5, 6.4, 11.1, 3.8, 8.9, 4.8, 23.8, 3, 2.9, 3.2)
n <- length(x)

# Bootstrap sample mean B = 10,000 times
B <- 10000

xbar.star <- replicate(B, mean( sample(x, n, replace = TRUE) ))

# Compute 95% CI from bootstrap samples
alpha <- 0.05
boot.CI <- quantile(xbar.star, probs = c(alpha/2, 1-alpha/2))

# Compute 95% t-statistic CI
t.stat.CI <- t.test(x)$conf.int

# Print results
cat("Bootstrap Confidence Interval (95%):", boot.CI, 
"\nt-statistic Confidence Interval (95%):", t.stat.CI)
```

<br>

- The bootstrap and t-statistic CI differ considerably, especially at low end

- Bootstrap CI has to be preferred, due to non-normality of data




# Part 3: <br> Bootstrap t-test {background-color="#cc0164" visibility="uncounted"}

::: footer

<div color="#cc0164">  </div>

:::



## Motivation {.smaller}

::: {style="font-size: 0.93em"}

- Compensation data for a sample of CEOs in 2012 and 2013  
(USA data, in million dollars)

|            |     |     |     |     |     |     |     |     |     |      |
|:-----------|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:----:|
|**CEO Pay 2013**| 3.2 | 3.8 | 2.6 | 3.5 | 7.0 | 20.4| 7.5 |  3.4| 5.0 |  6.0 |
|**CEO Pay 2012**| 23.5| 6.4 | 11.1| 3.8 | 8.9 | 4.8 | 23.8| 3.0 |2.9  | 3.2  |



- Want to test for a difference in means via the t-statistic
$$
t =  \frac{\bar{x} -\bar{y}}{s_p\sqrt{\frac{1}{n}+\frac{1}{m}}} \,, \qquad 
s_p = \sqrt{\frac{s^2_X(n-1)+s^2_Y(m-1)}{n+m-2}}
$$

- Want to test for a difference in variance via the F-statistic
$$
F=\frac{s_X^2}{s_Y^2}
$$
:::


## Motivation {.smaller}

::: {style="font-size: 0.93em"}

- Compensation data for a sample of CEOs in 2012 and 2013  
(USA data, in million dollars)

|            |     |     |     |     |     |     |     |     |     |      |
|:-----------|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:----:|
|**CEO Pay 2013**| 3.2 | 3.8 | 2.6 | 3.5 | 7.0 | 20.4| 7.5 |  3.4| 5.0 |  6.0 |
|**CEO Pay 2012**| 23.5| 6.4 | 11.1| 3.8 | 8.9 | 4.8 | 23.8| 3.0 |2.9  | 3.2  |



- Under assumptions of normality and independence of the populations, we have
$$
t \sim t_{n+m-2} \,, \qquad F \sim F_{n-1,m-1}
$$

- This information allows to compute the exact p-values for the t and F tests
$$
p_t = 2 P( t_{n+m-2} > |t| )  \,, \qquad p_F = 2P(F_{n-1,m-1} > F  )
$$

- **Question:** What if we cannot assume normality? How do we compute p-values?

- **Answer:** Bootstrap p-values  
    * like simulated p-values, but sampling from the sample, instead of the population
:::



## Bootstrap t-test procedure {.smaller}

::: {style="font-size: 0.93em"}

- Suppose given two samples:
    * $x_1, \ldots, x_n$ from a population with cdf $F(x)$
    * $y_1, \ldots, y_m$ from a population with cdf $F(x - \Delta)$

- **Note:** Population distributions have the same shape
    * Same spread, but they are shifted by $\Delta \in \R$


- Denoting by $\mu_X$ and $\mu_Y$ the means of $F(x)$ and $F(x - \Delta)$, we have
$$
\Delta = \mu_X - \mu_Y
$$

- We want to test for **difference in means**
$$
H_0 \colon \mu_X = \mu_Y \,, \quad \qquad 
H_1 \colon \mu_X \neq \mu_Y , \quad \mu_X < \mu_Y \,, \quad \text{ or } \quad  \mu_X > \mu_Y
$$

- We are not making assumptions on $F \implies$ distribution of t-statistic is unknown
    * Need to bootstrap the t-statistic

:::


## {.smaller}

- **Assume the null hypothesis is true:**
$$
\mu_X = \mu_Y  \quad \implies \quad \Delta = \mu_X - \mu_Y = 0
$$

- Hence, under $H_0$, the two samples come from the **same population** $F$

- This means the two samples are actually part of a single sample of size $n+m$
$$
\mathcal{S} = \{x_1, \ldots, x_n , y_1, \ldots, y_m \}
$$

- The sample distribution $\hat{F}$ of $\mathcal{S}$ is an approximation of $F$  
(Glivenko-Cantelli Theorem)

- We can therefore bootstrap the t-statistic from the combined sample $\mathcal{S}$ 



## {.smaller}


- The bootstrap samples are generated as follows:
    * Sample $\{x_1^*, \ldots, x_n^*\}$ from $\mathcal{S}$ with replacement
    * Sample $\{y_1^*, \ldots, y_m^*\}$ from $\mathcal{S}$ with replacement 

- Compute a bootstrap simulation of the t-statistic
$$
t^* =  \frac{\bar{x}^* -\bar{y}^*}{s_p\sqrt{\frac{1}{n}+\frac{1}{m}}} \,, \qquad 
s_p = \sqrt{\frac{(s^2_X)^*(n-1)+(s^2_Y)^*(m-1)}{n+m-2}}
$$

- Repeat $B$ times to obtain
$$
t^*_1, \ldots , t^*_B
$$

- These values represent the **bootstrap distribution** of the t-statistic


## {.smaller}

::: {style="font-size: 0.90em"}

- We now compare the bootstrap t-statistic to the observed statistic
$$
t_{\rm obs} = \frac{\bar{x} -\bar{y}}{s_p\sqrt{\frac{1}{n}+\frac{1}{m}}} \,, \qquad 
s_p = \sqrt{\frac{s^2_X(n-1)+ s^2_Y(m-1)}{n+m-2}}
$$



- A bootstrap simulation of the t-statistic $t_i^*$ is **extreme** if

|  **Alternative**    | $t_i^*$ **extreme**      |
|:------------------- |:-------------------------|
| $\mu_X \neq \mu_Y$  | $|t_i^*| > |t_{\rm obs}|$|
|  $\mu_X < \mu_Y$    | $t_i^* < t_{\rm obs}$    |
| $\mu_X > \mu_Y$     | $t_i^* > t_{\rm obs}$    |             
: {tbl-colwidths="[25,30]"}


- The bootstrap p-value is computed by
$$
p = \frac{\# \text{ of extreme bootstrap simulations}}{B}
$$
Note: Condition $|t_i^*| > |t_{\rm obs}|$ is equivalent to $t_i^* > |t_{\rm obs}|\,$ or $\, t_i^* < |t_{\rm obs}|$

:::



## Algorithm: Bootstrap t-test {.smaller}

::: {style="font-size: 0.90em"}

**Setting:** Given the two samples $x_1,\ldots,x_n$ and $y_1, \ldots, y_m$

1. Compute the observed t-statistic $t_{\rm obs}$ on the given data

2. Combine the two samples into one sample $\mathcal{S} = \{ x_1, \ldots, x_n, y_1, \ldots, y_m\}$

3. Sample $\{x_1^*, \ldots, x_n^*\}$ from $\mathcal{S}$ with replacement

4. Sample $\{y_1^*, \ldots, y_m^*\}$ from $\mathcal{S}$ with replacement 

5. Compute the t-statistic on the bootstrap samples

6. Repeat steps 3-5, $B$ times, obtaining $B$ bootstrap simulations of t-statistic $t^*_1, \ldots , t^*_B$

::: {.column width="38%"}

7. Compute the p-value by
$$
p = \frac{\# \text{ extreme } t_i^*}{B}
$$

:::

::: {.column width="48%"}

|  **Alternative**    | $t_i^*$ **extreme**      |
|:------------------- |:-------------------------|
| $\sigma_X^2 \neq \sigma^2_Y$  | $|t_i^*| > |t_{\rm obs}|$  |
|  $\mu_X < \mu_Y$    | $t_i^* < t_{\rm obs}$   |
| $\mu_X > \mu_Y$     | $t_i^* > t_{\rm obs}$    |             
: {tbl-colwidths="[40,40]"}

:::


:::



## Worked Example {.smaller}

- Compensation data for a sample of CEOs in 2012 and 2013  
(USA data, in million dollars)

|            |     |     |     |     |     |     |     |     |     |      |
|:-----------|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:----:|
|**CEO Pay 2013**| 3.2 | 3.8 | 2.6 | 3.5 | 7.0 | 20.4| 7.5 |  3.4| 5.0 |  6.0 |
|**CEO Pay 2012**| 23.5| 6.4 | 11.1| 3.8 | 8.9 | 4.8 | 23.8| 3.0 |2.9  | 3.2  |



<br>

- We want to test for a difference in means

$$
H_0 \colon \mu_X = \mu_Y \,, \qquad H_1 \colon \mu_X \neq \mu_Y
$$

**Does average pay change from 2012 to 2013?**



## Plotting the densities {.smaller}

- We see that Pay is not normally distributed $\implies$ Bootstrap t-test is appropriate

```{r}
#| echo: true
#| code-fold: true
#| code-summary: "View the R Code"

# Enter the Wages data
ceo13 <- c(3.2, 3.8, 2.6, 3.5, 7.0, 20.4, 7.5, 3.4, 5.0, 6.0)
ceo12 <- c(23.5, 6.4, 11.1, 3.8, 8.9, 4.8, 23.8, 3.0, 2.9, 3.2)


# Compute the estimated distributions
d.ceo13 <- density(ceo13)
d.ceo12 <- density(ceo12)


# Plot the estimated distributions

plot(d.ceo13,                                    # Plot d.ceo13
     xlim = range(c(d.ceo12$x, d.ceo13$x)),        # Set x-axis range
     ylim = range(c(d.ceo12$y, d.ceo13$y)),        # Set y-axis range
     main = "Estimated Distributions of CEOs Pay") # Add title to plot
lines(d.ceo12,                                    # Layer plot of d.ceo12
      lty = 2)                                  # Use different line style
         
legend("topleft",                               # Add legend at top-right
       legend = c("CEOs Pay 2013",             # Labels for legend
                  "CEOs Pay 2012"), 
       lty = c(1, 2))                           # Assign curves to legend          
```




## Enter the data and compute $t_{\rm obs}$ {.smaller}

- Enter the data

```r
ceo13 <- c(3.2, 3.8, 2.6, 3.5, 7.0, 20.4, 7.5, 3.4, 5.0, 6.0)
ceo12 <- c(23.5, 6.4, 11.1, 3.8, 8.9, 4.8, 23.8, 3.0, 2.9, 3.2)
```

- Calculate $t_{\rm obs}$
    * This can be done by using ``t.test``
    * Under the null hypothesis, the two samples come from the same population
    * Therefore, we need to specify the populations have the same variance
    * This is done by including ``var.equal = T``

```r
# Calculate observed t-statistic
t.obs <- t.test(ceo13, ceo12, var.equal = T)$statistic
```
```{r}
ceo13 <- c(3.2, 3.8, 2.6, 3.5, 7.0, 20.4, 7.5, 3.4, 5.0, 6.0)
ceo12 <- c(23.5, 6.4, 11.1, 3.8, 8.9, 4.8, 23.8, 3.0, 2.9, 3.2)
t.obs <- t.test(ceo13, ceo12, var.equal = T)$statistic
t.obs
```



## Simulating a single bootstrap t-statistic {.smaller}

- Compute sample size, and combine the observations into a single sample

```r
# Compute sample size
n <- length(ceo13)
m <- length(ceo12)

# Combine the samples
combined <- c(ceo13, ceo12)
```


- Calculate one bootstrap sample from mathematicians and accountants

```r
ceo13.boot <-sample(combined, n, replace = T)
ceo12.boot <- sample(combined, m, replace = T)
```

- Calculate the simulated bootstrap $t$-statistic

```r
t.boot <- t.test(ceo13.boot, ceo12.boot, var.equal = T)$statistic
```
```{r}
set.seed(1)

ceo13 <- c(3.2, 3.8, 2.6, 3.5, 7.0, 20.4, 7.5, 3.4, 5.0, 6.0)
ceo12 <- c(23.5, 6.4, 11.1, 3.8, 8.9, 4.8, 23.8, 3.0, 2.9, 3.2)

n <- length(ceo13)
m <- length(ceo12)

combined <- c(ceo13, ceo12)

ceo13.boot <-sample(combined, n, replace = T)
ceo12.boot <- sample(combined, m, replace = T)

t.boot <- t.test(ceo13.boot, ceo12.boot, var.equal = T)$statistic

t.boot
```




## Bootstrapping the t-static {.smaller}

::: {style="font-size: 0.92em"}

- In the previous slide we generated one simulated value of the t-statistic

- To generate $B = 10,000$ bootstrap simulations, we use ``replicate``

```r
# Bootstrap the t-statistic B = 10,000 times
B <- 10000

t.boot <- replicate(B, {
                    # Single bootstrap sample
                    ceo13.boot <- sample(combined, n, replace = T)
                    ceo12.boot <- sample(combined, m, replace = T)
                    
                    # Return single bootstrap t-statistic
                    t.test(ceo13.boot, ceo12.boot, var.equal = T)$statistic
                    })
```

- The vector ``t.boot`` contains $B=10,000$ bootstrap simulations of the t-statistic

:::




## Compute the bootstrap p-value {.smaller}

::: {style="font-size: 0.92em"}

- We are conducting a two-sided test. Hence, the bootstrap p-value is
$$
p = \frac{ \# \text{ extreme } t^*_i}{B} = 
    \frac{ \#_{i=1}^B \, |t^*_i| > |t_{\rm obs}| }{B}
$$

```r 
# Count number of extreme statistics for two-sided test
extreme <- sum ( abs( t.boot ) > abs (t.obs) )

# Compute the p-value
p <- extreme / B

# Print
cat("The bootstrap p-value is:", p)
```


```{r}
set.seed(21)

# Enter the data
ceo13 <- c(3.2, 3.8, 2.6, 3.5, 7.0, 20.4, 7.5, 3.4, 5.0, 6.0)
ceo12 <- c(23.5, 6.4, 11.1, 3.8, 8.9, 4.8, 23.8, 3.0, 2.9, 3.2)

# Calculate observed t-statistic
t.obs <- t.test(ceo13, ceo12, var.equal = T)$statistic

# Compute sample size
n <- length(ceo13)
m <- length(ceo12)

# Combine the samples
combined <- c(ceo13, ceo12)

# Bootstrap the t-statistic B = 10,000 times
B <- 10000

t.boot <- replicate(B, {
                    # Single bootstrap sample
                    ceo13.boot <- sample(combined, n, replace = T)
                    ceo12.boot <- sample(combined, m, replace = T)
                    
                    # Return single bootstrap t-statistic
                    t.test(ceo13.boot, ceo12.boot, var.equal = T)$statistic
                    })

# Count number of extreme statistics for two-sided test
extreme <- sum ( abs( t.boot ) > abs (t.obs) )

# Compute the p-value
p <- extreme / B

# Print
cat("The bootstrap p-value is:", p)
```

- **Conclusion:** No evidence ($p > 0.05$) of a difference in pay between 2012 and 2013

- The code can be downloaded here [bootstrap_t_test.R](codes/bootstrap_t_test.R)

:::



## Comparison with normal family test {.smaller}

- The bootstrap p-value just computed is $p = 0.3715$

- We compare it to the two-sample t-test p-value

```r
p2 <- t.test(ceo13, ceo12, var.equal = T)$p.value

cat("The t-test p-value is:", p2)
```

```{r}
# Enter the data
ceo13 <- c(3.2, 3.8, 2.6, 3.5, 7.0, 20.4, 7.5, 3.4, 5.0, 6.0)
ceo12 <- c(23.5, 6.4, 11.1, 3.8, 8.9, 4.8, 23.8, 3.0, 2.9, 3.2)

p2 <- t.test(ceo13, ceo12, var.equal = T)$p.value

cat("The t-test p-value is:", p2)
```

<br>

- The two p-values are quite similar, even though the data is non-normal

- This indicates that the t-test is fairly robust to non-normality 

**However, since data is non-normal, the bootstrap t-test is the preferred choice**








# Part 4: <br> Bootstrap F-test {background-color="#cc0164" visibility="uncounted"}

::: footer

<div color="#cc0164">  </div>

:::



## Bootstrap F-test procedure {.smaller}

- Suppose given a cdf $G(\cdot)$, and two samples:
    * $x_1, \ldots, x_n$ from a population $X$ with cdf $\, G \left( x - \mu_X \right)$
    * $y_1, \ldots, y_m$ from a population $Y$ with cdf $\, G \left( \dfrac{y - \mu_Y }{\Delta} \right)$

- **Note:** Population distributions have similar shape, 
    * However means and spreads are (potentially) different

- Denoting by $\sigma^2_X$ and $\sigma^2_Y$ the variances of $X$ and $Y$, we have
$$
\Delta = \frac{\sigma^2_X}{\sigma^2_Y}
$$




## {.smaller}

- We want to test for **difference in variances**

$$
H_0 \colon \sigma^2_X = \sigma^2_Y \,, \quad \qquad 
H_1 \colon \sigma^2_X \neq \sigma^2_Y  \,, \quad \text{ or } \quad \sigma^2_X > \sigma^2_Y
$$

- **As usual for F-test, we label the samples so that $s_X^2 \geq s_Y^2$**


- Not making assumptions on population $G \implies$ distribution of F-statistic is unknown
    * Need to bootstrap the F-statistic

- **Assume the null hypothesis is true:**
$$
\sigma_X^2 = \mu_Y^2  \quad \implies \quad 
\Delta = \frac{\sigma^2_X}{\sigma^2_Y} = 1
$$


## {.smaller}

- Hence, under $H_0$, the two samples $X$ and $Y$ have cdfs
$$
G \left( x - \mu_X \right) \quad \text{ and } \quad  G \left(y - \mu_Y \right)
$$

- By centering, we obtain that 
$$
X - \mu_X \quad \text{ and } \quad Y - \mu_Y \quad \text{ have both cdf } \quad  G \left( z \right)
$$ 



- Thus, the two **centered** samples are part of a single sample of size $n+m$
$$
\mathcal{S} = \{x_1 - \overline{x}, \ldots, x_n - \overline{x} , y_1 - \overline{y}, \ldots, y_m - \overline{y} \}
$$

- The sample distribution $\hat{G}$ of $\mathcal{S}$ is an approximation of $G$  
(Glivenko-Cantelli Theorem)

- We bootstrap the F-statistic from the centered combined sample $\mathcal{S}$ 




## {.smaller}


- The bootstrap samples are generated as follows:
    * Sample $\{x_1^*, \ldots, x_n^*\}$ from $\mathcal{S}$ with replacement
    * Sample $\{y_1^*, \ldots, y_m^*\}$ from $\mathcal{S}$ with replacement 

- Compute a bootstrap simulation of the F-statistic
$$
F^* =  \frac{(s_X^2)^*}{(s_Y^2)^*}
$$

- Repeat $B$ times to obtain
$$
F^*_1, \ldots , F^*_B
$$

- These values represent the **bootstrap distribution** of the F-statistic


## {.smaller}



- We now compare the bootstrap F-statistic to the observed statistic
$$
F_{\rm obs} = \frac{s^2_X}{s^2_Y}
$$


- A bootstrap simulation of the F-statistic $F_i^*$ is **extreme** if

|  **Alternative**    | $F_i^*$ **extreme**      |
|:------------------- |:-------------------------|
| $\sigma_X^2 \neq \sigma^2_Y$ | $F_i^* > F_{\rm obs} \,$ or $F_i^* < 1/F_{\rm obs}$ |
| $\sigma_X^2 > \sigma^2_Y$    | $F_i^* > F_{\rm obs}$   |
: {tbl-colwidths="[25,40]"}

- The bootstrap p-value is computed by

$$
p = \frac{\# \text{ of extreme bootstrap simulations}}{B}
$$



## Algorithm: Bootstrap F-test {.smaller}

::: {style="font-size: 0.90em"}

**Setting:** Given the two samples $x_1,\ldots,x_n$ and $y_1, \ldots, y_m$

0. Compute sample variances $s_X^2$ and $s_Y^2$. If $s_Y^2 > s_X^2$, swap the samples

1. Compute the observed F-statistic $F_{\rm obs}$ on the given data

2. Combine (centered) samples into $\mathcal{S} = \{ x_1 - \overline{x}, \ldots, x_n - \overline{x}, y_1 - \overline{y}, \ldots, y_m- \overline{y}\}$

3. Sample $\{x_1^*, \ldots, x_n^*\}$ from $\mathcal{S}$ with replacement

4. Sample $\{y_1^*, \ldots, y_m^*\}$ from $\mathcal{S}$ with replacement 

5. Compute the F-statistic on the bootstrap samples

6. Repeat steps 3-5, $B$ times, obtaining $B$ bootstrap simulations of F-statistic $F^*_1, \ldots , F^*_B$

::: {.column width="38%"}

7. Compute the p-value by
$$
p = \frac{\# \text{ extreme } F_i^*}{B}
$$

:::

::: {.column width="48%"}

|  **Alternative**    | $F_i^*$ **extreme**      |
|:------------------- |:-------------------------|
| $\sigma_X^2 \neq \sigma^2_Y$ | $F_i^*> F_{\rm obs} \,$ of $\, F_i^* < 1/F_{\rm obs}$ |
| $\sigma_X^2 > \sigma^2_Y$    | $F_i^* > F_{\rm obs}$   |
: {tbl-colwidths="[35,70]"}

:::


:::



## Worked Example {.smaller}

- Compensation data for a sample of CEOs in 2012 and 2013  
(USA data, in million dollars)

|            |     |     |     |     |     |     |     |     |     |      |
|:-----------|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:----:|
|**CEO Pay 2013**| 3.2 | 3.8 | 2.6 | 3.5 | 7.0 | 20.4| 7.5 |  3.4| 5.0 |  6.0 |
|**CEO Pay 2012**| 23.5| 6.4 | 11.1| 3.8 | 8.9 | 4.8 | 23.8| 3.0 |2.9  | 3.2  |


<br>

- We want to test for a difference in variances
$$
H_0 \colon \sigma^2_X = \sigma^2_Y \,, \qquad H_1 \colon \sigma^2_X \neq \sigma^2_Y
$$


- We already know that data is non-normal $\implies$ Bootstrap F-test is appropriate




## Enter the data {.smaller}


- Enter the data, and compute sample variances

```{r}
#| echo: true
# Enter the data
ceo13 <- c(3.2, 3.8, 2.6, 3.5, 7.0, 20.4, 7.5, 3.4, 5.0, 6.0)
ceo12 <- c(23.5, 6.4, 11.1, 3.8, 8.9, 4.8, 23.8, 3.0, 2.9, 3.2)

# Compare variances
if (var(ceo12) > var(ceo13)) cat("Swap the samples!")
```

<br>

- We need to swap the labels:
    * $X = \,$ CEO Pay in 2012 $\qquad \quad$ $Y = \,$ CEO Pay in 2013



## Compute $F_{\rm obs}$ {.smaller}

- Calculate $F_{\rm obs}$

$$
F_{\rm obs} = \frac{s_X^2}{s_Y^2} = \frac{\rm Variance \,\,\, CEO \, Pay \, in  \, 2012}{\rm Variance \,\,\, CEO \, Pay \, in \, 2013}
$$

- Note that the samples are swapped (to ensure $s_X^2 \geq s_Y^2$)

<br>

```r
# Calculate observed F-statistic (samples are swapped)
F.obs <- var(ceo12) / var(ceo13)
```
```{r}
ceo13 <- c(3.2, 3.8, 2.6, 3.5, 7.0, 20.4, 7.5, 3.4, 5.0, 6.0)
ceo12 <- c(23.5, 6.4, 11.1, 3.8, 8.9, 4.8, 23.8, 3.0, 2.9, 3.2)
F.obs <- var(ceo12) / var(ceo13)
F.obs
```



## Simulating a single bootstrap F-statistic {.smaller}

- Compute sample size; combine (centered) observations into a single sample

```r
# Compute sample size (samples are swapped)
n <- length(ceo12)
m <- length(ceo13)

# Combine the centered samples
combined.centered <- c(ceo12 - mean(ceo12), ceo13 - mean(ceo13))
```


- Calculate one bootstrap sample from accountants and mathematicians

```r
ceo12.boot <-sample(combined.centered, n, replace = T)
ceo13.boot <- sample(combined.centered, m, replace = T)
```

- Calculate the simulated bootstrap $F$-statistic

```r
F.boot <- var(ceo12.boot) / var(ceo13.boot)
```
```{r}
set.seed(21)

ceo13 <- c(3.2, 3.8, 2.6, 3.5, 7.0, 20.4, 7.5, 3.4, 5.0, 6.0)
ceo12 <- c(23.5, 6.4, 11.1, 3.8, 8.9, 4.8, 23.8, 3.0, 2.9, 3.2)

n <- length(ceo12)
m <- length(ceo13)

combined.centered <- c(ceo12 - mean(ceo12), ceo13 - mean(ceo13))

ceo12.boot <-sample(combined.centered, n, replace = T)
ceo13.boot <- sample(combined.centered, m, replace = T)

F.boot <- var(ceo12.boot) / var(ceo13.boot)

F.boot
```


## Bootstrapping the F-static {.smaller}

::: {style="font-size: 0.92em"}

- In the previous slide we generated one simulated value of the F-statistic

- To generate $B = 10,000$ bootstrap simulations, we use ``replicate``

```r
# Bootstrap the F-statistic B = 10,000 times
B <- 10000

F.boot <- replicate(B, {
                    # Single bootstrap sample
                    ceo12.boot <-sample(combined.centered, n, replace = T)
                    ceo13.boot <- sample(combined.centered, m, replace = T)
                    
                    # Return single bootstrap F-statistic
                    var(ceo12.boot) / var(ceo13.boot)
})
```

- The vector ``F.boot`` contains $B=10,000$ bootstrap simulations of the F-statistic

:::




## Compute the bootstrap p-value {.smaller}

::: {style="font-size: 0.92em"}

- We are conducting a two-sided test. Hence, the bootstrap p-value is
$$
p = \frac{ \# \text{ extreme } F^*_i}{B} = 
    \frac{ \#_{i=1}^B \,\, F^*_i > F_{\rm obs} \,\, \text{ or } \,\, F^*_i < 1/F_{\rm obs}}{B}
$$

```r 
# Count number of extreme statistics for two-sided test
extreme <- sum ( (F.boot > F.obs) | (F.boot < 1/F.obs) )

# Compute the p-value
p <- extreme / B

# Print
cat("The bootstrap p-value is:", p)
```


```{r}
set.seed(21)

# Enter the data
ceo13 <- c(3.2, 3.8, 2.6, 3.5, 7.0, 20.4, 7.5, 3.4, 5.0, 6.0)
ceo12 <- c(23.5, 6.4, 11.1, 3.8, 8.9, 4.8, 23.8, 3.0, 2.9, 3.2)

# Compare variances: in the example ceo12 has larger variance
# Larger variance has to be at numerator

# Calculate observed F-statistic (samples are swapped)
F.obs <- var(ceo12) / var(ceo13)

# Compute sample size (samples are swapped)
n <- length(ceo12)
m <- length(ceo13)

# Combine the centered samples
combined.centered <- c(ceo12 - mean(ceo12), ceo13 - mean(ceo13))

# Bootstrap the F-statistic B = 10,000 times
B <- 10000

F.boot <- replicate(B, {
                    # Single bootstrap sample
                    ceo12.boot <-sample(combined.centered, n, replace = T)
                    ceo13.boot <- sample(combined.centered, m, replace = T)
                    
                    # Return single bootstrap F-statistic
                    var(ceo12.boot) / var(ceo13.boot)
})

# Count number of extreme statistics for two-sided test
extreme <- sum ( (F.boot > F.obs) | (F.boot < 1/F.obs) )

# Compute the p-value
p <- extreme / B

# Print
cat("The bootstrap p-value is:", p)
```

- **Conclusion:** No evidence ($p > 0.05$) of a difference in variance between populations

- The code can be downloaded here [bootstrap_F_test.R](codes/bootstrap_t_test.R)

:::



## Comparison with normal family test {.smaller}

- The bootstrap p-value just computed is $p = 0.3506$

- We compare it to the F-test p-value

```r
p2 <- var.test(ceo12, ceo13)$p.value

cat("The F-test p-value is:", p2)
```

```{r}
# Enter the data
ceo13 <- c(3.2, 3.8, 2.6, 3.5, 7.0, 20.4, 7.5, 3.4, 5.0, 6.0)
ceo12 <- c(23.5, 6.4, 11.1, 3.8, 8.9, 4.8, 23.8, 3.0, 2.9, 3.2)


p2 <- var.test(ceo12, ceo13)$p.value

cat("The F-test p-value is:", p2)
```


<br>

- The two p-values are quite different (although they give same decision)

- This is due to the non-normality of data
    * shows that the F-test is not very robust to non-normality

**Since data is non-normal, the bootstrap F-test is the preferred choice**









# Part 5: <br>Lists {background-color="#cc0164" visibility="uncounted"}

::: footer

<div color="#cc0164">  </div>

:::



## Lists {.smaller}


- Vectors can contain only one data type (number, character, boolean)

- Lists are data structures that can contain **any R object**

- Lists can be created similarly to vectors, with the command ``list()``

```{r}
#| echo: true

# List containing a number, a vector, and a string
my_list <- list(2, c(T,F,T,T), "hello")

# Print the list
print(my_list)
```




## Retrieving elements {.smaller}

Elements of a list can be retrieved by **indexing**

- ``my_list[[k]]`` returns k-th element of ``my_list``

<br>

```{r}
#| echo: true
# Consider again the same list
my_list <- list(2, c(T,F,T,T), "hello")

# Access 2nd element of my_list and store it in variable
second_element <- my_list[[2]]

# In this case the variable second_element is a vector
print(second_element)

```



## List slicing {.smaller}


You can return multiple items of a list via **slicing**

- ``my_list[c(k1, ..., kn)]`` returns elements in positions ``k1, ..., kn``
- ``my_list[k1:k2]`` returns elements ``k1`` to ``k2``

```{r}
#| echo: true

my_list <- list(2, c(T,F), "Cat", "Dog", pi, 42)

# We store 1st, 3rd, 5th entries of my_list in slice
slice <- my_list[c(1, 3, 5)]

print(slice)

```


## List slicing {.smaller}


```{r}
#| echo: true

my_list <- list(2, c(T,F), "Cat", "Dog", pi, 42)

# We store 2nd to 4th entries of my_list in slice
slice <- my_list[2:4]

print(slice)

```


## Naming {.smaller}


- Components of lists can be **named**
    * ``names(my_list) <- c("name_1", ..., "name_k")``

```{r}
#| echo: true

# Create list with 3 elements
my_list <- list(2, c(T,F,T,T), "hello")

# Name each of the 3 elements
names(my_list) <- c("number", "TF_vector", "string")

# Print the named list: the list is printed along with element names 
print(my_list)

```




## Accessing named entries {.smaller}

- A component of ``my_list`` named ``my_name`` can be accessed with dollar operator
    * ``my_list$my_name``

```{r}
#| echo: true

# Create list with 3 elements and name them
my_list <- list(2, c(T,F,T,T), "hello")
names(my_list) <- c("number", "TF_vector", "string")

# Access 2nd element using dollar operator and store it in variable
second_component <- my_list$TF_vector

# Print 2nd element
print(second_component)

```




## Naming vectors {.smaller}


- Vectors can be **named**, using the same syntax
    * ``names(my_vector) <- c("name_1", ..., "name_k")``


<br>


```{r}
#| echo: true

# Create vector storing RGB levels of purple color
purple <- c(99, 3, 48)
names(purple) <- c("Red", "Green", "Blue")

# Print the vector
print(purple)
```



## Accessing named entries {.smaller}

- A named component is accessed via indexing
    * ``my_vector["name_k"]``


<br>

```r
# Print 2nd element
print(purple["Green"])
```

```{r}
# Create vector storing RGB levels of purple color
purple <- c(99, 3, 48)
names(purple) <- c("Red", "Green", "Blue")

# Print 2nd element
print(purple["Green"])
```

<br>

```r
# Print only the value stored in "Green"
print(as.numeric(purple["Green"]))
```

```{r}
# Create vector storing RGB levels of purple color
purple <- c(99, 3, 48)
names(purple) <- c("Red", "Green", "Blue")

# Print only the value stored in "Green"
print(as.numeric(purple["Green"]))
```



# Part 6: <br>Data Frames {background-color="#cc0164" visibility="uncounted"}

::: footer

<div color="#cc0164">  </div>

:::



## Data Frames {.smaller}

- Data Frames are the preferred way of presenting a data set in R:
    * Each variable has assigned a collection of recorded observations

- Data frames can contain any R object

- Data Frames are similar to Lists, with the difference that:
    * Members of a Data Frame must all be vectors of equal length

- In simpler terms:
    * Data Frame is a rectangular table of entries





## Constructing a Data Frame {.smaller}

- Data frames are constructed similarly to lists, using 
    * ``data.frame()``

- **Important**: Elements of data frame must be vectors of the same length

- **Example**: We construct the **Family Guy** data frame. Variables are
    * ``person`` -- Name of character
    * ``age`` -- Age of character
    * ``sex`` -- Sex of character

```r
family <- data.frame(
  person = c("Peter", "Lois", "Meg", "Chris", "Stewie"),
  age = c(42, 40, 17, 14, 1),
  sex = c("M", "F" , "F", "M", "M")
)
```



## Printing a Data Frame {.smaller}

::: {.column width="44%"}

- R prints data frames like matrices
- First row contains vector names

:::

::: {.column width="54%"}

- First column contains row names
- Data are paired: e.g. Peter is 42 and Male

:::

```{r}
#| echo: true

family <- data.frame(
  person = c("Peter", "Lois", "Meg", "Chris", "Stewie"),
  age = c(42, 40, 17, 14, 1),
  sex = c("M", "F" , "F", "M", "M")
)

print(family)

```


## Accessing single entry {.smaller}

- Think of a data frame as a *matrix*

- You can access element in position ``(m,n)`` by using
    * ``my_data[m, n]``

- **Example**
    * Peter is in 1st row
    * Names are in 1st column 
    * Therefore, Peter's name is in position ``(1,1)``


```r
data <- family[1, 1]

print(data)
```

```{r}
family <- data.frame(
  person = c("Peter", "Lois", "Meg", "Chris", "Stewie"),
  age = c(42, 40, 17, 14, 1),
  sex = c("M", "F" , "F", "M", "M")
)

data <- family[1, 1]

print(data)
```




## Accessing multiple entries {.smaller}

To access multiple elements on the same row or column, type

- ``my_data[c(k1,...,kn), m] `` $\quad$ or $\quad$ `` my_data[k1:k2, m]``
- ``my_data[n, c(k1,...,km)] `` $\quad$ or $\quad$ `` my_data[n, k1:k2]``

**Example:** We want to access Stewie's Sex and Age:

- Stewie is listed in 5th row
- Age and Sex are in 2nd and 3rd column

```r
stewie_data <- family[5, 2:3]

print(stewie_data)
```

```{r}
family <- data.frame(
  person = c("Peter", "Lois", "Meg", "Chris", "Stewie"),
  age = c(42, 40, 17, 14, 1),
  sex = c("M", "F" , "F", "M", "M")
)

stewie_data <- family[5, 2:3]

print(stewie_data)
```



## Accessing rows {.smaller}


- To access rows ``k1,...,kn``
    * ``my_data[c(k1,...,kn), ]`` 
    
- To access rows ``k1`` to ``kn`` 
    * ``my_data[k1:k2, ]``


<br>

```r
data <- family[c(1,3), ]      # Access 1st and 3rd row - Peter & Meg

print(data)
```

```{r}

family <- data.frame(
  person = c("Peter", "Lois", "Meg", "Chris", "Stewie"),
  age = c(42, 40, 17, 14, 1),
  sex = c("M", "F" , "F", "M", "M")
)

data <- family[c(1,3), ]      # Access 1st and 3rd row - Peter & Meg

print(data)

```



## Accessing columns {.smaller}

- To access columns ``k1,...,kn``
    * ``my_data[ , c(k1,...,kn)]`` 
    
- To access columns ``k1`` to ``kn`` 
    * ``my_data[ ,k1:k2]``


<br>


```r
age.name <- family[, c(2,1)]    # Access 2nd and 1st columns: Age and Name

print(age.name)
```

```{r}

family <- data.frame(
  person = c("Peter", "Lois", "Meg", "Chris", "Stewie"),
  age = c(42, 40, 17, 14, 1),
  sex = c("M", "F" , "F", "M", "M")
)

age.name <- family[, c(2,1)]


print(age.name)

```




## The dollar operator {.smaller}

Use dollar operator to access data frame columns

- Suppose data frame ``my_data`` contains a variable called ``my_variable``
    * ``my_data$my_variable`` accesses column ``my_variable``
    * ``my_data$my_variable`` is a vector

**Example**: To access ``age`` in the ``family`` data frame type

```r
ages <- family$age        # Stores ages in a vector

cat("Ages of the Family Guy characters are:", ages)
```

```{r}
family <- data.frame(
  person = c("Peter", "Lois", "Meg", "Chris", "Stewie"),
  age = c(42, 40, 17, 14, 1),
  sex = c("M", "F" , "F", "M", "M")
)

ages <- family$age

cat("Ages of the Family Guy characters are:", ages)
```

```r
cat("Meg's age is", ages[3])
```


```{r}
family <- data.frame(
  person = c("Peter", "Lois", "Meg", "Chris", "Stewie"),
  age = c(42, 40, 17, 14, 1),
  sex = c("M", "F" , "F", "M", "M")
)

ages <- family$age

cat("Meg's age is", ages[3])
```


## Size of a data frame {.smaller}



|  Command            |    Output         |
|:------------        |:-------------     |
|``nrow(my_data)``    | # of rows         |
|``ncol(my_data)``    | # of columns      |
|``dim(my_data)``     | vector containing #  of rows and columns |
: {tbl-colwidths="[30,60]"}


<br>


```r
family_dim <- dim(family)    # Stores dimensions of family in a vector

cat("The Family Guy data frame has", 
    family_dim[1], 
    "rows and", 
    family_dim[2], 
    "columns")
```

```{r}
family <- data.frame(
  person = c("Peter", "Lois", "Meg", "Chris", "Stewie"),
  age = c(42, 40, 17, 14, 1),
  sex = c("M", "F" , "F", "M", "M")
)

family_dim <- dim(family)

cat("The Family Guy data frame has", family_dim[1], 
    "rows and", family_dim[2], "columns")

```




## Adding Data {.smaller}


Assume given a data frame ``my_data``

- To add more records (adding to rows ``rbind``) 
    * Create single row data frame ``new_record``
    * ``new_record`` must match the structure of ``my_data``
    * Add to ``my_data`` with ``my_data <- rbind(my_data, new_record)``

- To add a set of observations for a new variable (adding to columns ``cbind``)
    * Create a vector ``new_variable``
    * ``new_variable`` must have as many components as rows in ``my_data``
    * Add to ``my_data`` with ``my_data <- cbind(my_data, new_variable)``

    

## Example: Add new record {.smaller}

- Consider the usual **Family Guy** data frame ``family``
- Suppose we want to add data for **Brian**
- Create a new record: a single row data frame with columns   
    * *person*, *age*, *sex*

```{r}
#| echo: true

new_record <- data.frame(
  person = "Brian",
  age = 7,
  sex = "M"
)

print(new_record)
```

**Important:** Names have to match existing data frame



## Example: Add new record {.smaller}


- Now, we add ``new_record`` to ``family``
- This is done by *appending* one row to the existing data frame

<br>

```r
family <- rbind(family, new_record)

print(family)
```

```{r}
family <- data.frame(
  person = c("Peter", "Lois", "Meg", "Chris", "Stewie"),
  age = c(42, 40, 17, 14, 1),
  sex = c("M", "F" , "F", "M", "M")
)

new_record <- data.frame(
  person = "Brian",
  age = 7,
  sex = "M"
)

family <- rbind(family, new_record)
print(family)
```



## Example: Add new variable {.smaller}

- We want to add a new variable to the **Family Guy** data frame ``family``
- This variable is called ``funny``
- It records how funny each character is, with levels
    * *Low*, *Med*, *High*
- Create a vector ``funny`` with entries matching each character (including **Brian**)


```{r}
#| echo: true

funny <- c("High", "High", "Low", "Med", "High", "Med")

print(funny)

```


## Example: Add new variable {.smaller}

- Add ``funny`` to the **Family Guy** data frame ``family``
- This is done by *appending* one column to the existing data frame


```r
family <- cbind(family, funny)

print(family)
```


```{r}
family <- data.frame(
  person = c("Peter", "Lois", "Meg", "Chris", "Stewie"),
  age = c(42, 40, 17, 14, 1),
  sex = c("M", "F" , "F", "M", "M")
)

new_record <- data.frame(
  person = "Brian",
  age = 7,
  sex = "M"
)

family <- rbind(family, new_record)

funny <- c("High", "High", "Low", "Med", "High", "Med")

family <- cbind(family, funny)
print(family)
```



## Adding a new variable {.smaller}
### Alternative way

Instead of using ``cbind`` we can use dollar operator:

- Want to add variable called ``new_variable``
- Create a vector ``v`` containing values for the new variable
- ``v`` must have as many components as rows in ``my_data``
- Add to ``my_data`` with 
    * ``my_data$new_variable <- v``
    



## Example  {.smaller}

- We add age expressed in months to the **Family Guy** data frame ``family``
- Age in months can be computed by multiplying vector ``family$age`` by $12$


```r
v <- family$age * 12       # Computes vector of ages in months

family$age.months <- v     # Stores vector as new column in family

print(family)
```


```{r}
family <- data.frame(
  person = c("Peter", "Lois", "Meg", "Chris", "Stewie"),
  age = c(42, 40, 17, 14, 1),
  sex = c("M", "F" , "F", "M", "M")
)

new_record <- data.frame(
  person = "Brian",
  age = 7,
  sex = "M"
)

family <- rbind(family, new_record)

funny <- c("High", "High", "Low", "Med", "High", "Med")

family <- cbind(family, funny)

v <- family$age * 12
family$age.months <- v
print(family)
```




## Logical Record Subsets {.smaller}

- We saw how to use **logical flag vectors** to subset vectors

- We can use logical flag vectors to subset data frames as well

- Suppose to have data frame ``my_data`` containing a variable ``my_variable``

- Want to subset records in ``my_data`` for which  ``my_variable`` satisfies a condition

- Use commands
    * ``flag <- condition(my_data$my_variable)``
    * ``my_data[flag, ]``
 



## Example {.smaller}

- Consider again the **Family Guy** data frame ``family``
- We subset Female characters using flag 
    * ``family$sex == "F"``



```r
# Create flag vector for female Family Guy characters
flag <- (family$sex == "F")
print(flag)
```

```{r}
family <- data.frame(
  person = c("Peter", "Lois", "Meg", "Chris", "Stewie"),
  age = c(42, 40, 17, 14, 1),
  sex = c("M", "F" , "F", "M", "M")
)

new_record <- data.frame(
  person = "Brian",
  age = 7,
  sex = "M"
)

family <- rbind(family, new_record)

funny <- c("High", "High", "Low", "Med", "High", "Med")

family <- cbind(family, funny)

family$age.months <- family$age * 12

flag <- (family$sex == "F")
print(flag)
```

<br>

```r
# Subset data frame "family" and store in data frame "subset"
subset <- family[flag, ]
print(subset)
```


```{r}
family <- data.frame(
  person = c("Peter", "Lois", "Meg", "Chris", "Stewie"),
  age = c(42, 40, 17, 14, 1),
  sex = c("M", "F" , "F", "M", "M")
)

new_record <- data.frame(
  person = "Brian",
  age = 7,
  sex = "M"
)

family <- rbind(family, new_record)

funny <- c("High", "High", "Low", "Med", "High", "Med")

family <- cbind(family, funny)

family$age.months <- family$age * 12

flag <- (family$sex == "F")

subset <- family[flag, ]
print(subset)
```




# Part 7: <br>Data Entry {background-color="#cc0164" visibility="uncounted"}

::: footer

<div color="#cc0164">  </div>

:::



## Reading data from files {.smaller}

- R has a many functions for reading **characters** from stored **files** 

- We will see how to read **Table-Format** files

- **Table-Formats** are just tables stored in plain-text files

- Typical file estensions are:
    * ``.txt`` for plain-text files
    * ``.csv`` for comma-separated values


- **Table-Formats** can be read into R with the command
    * ``read.table()``




## Table-Formats {.smaller}
### 4 key features
    
1. **Header**: 
    * If present, header should be the first line of the file
    * Header is used to provide names for each column of data
    * If a header is present, you need to tell this to R when importing
    * If not, R cannot tell if first line is a header or observed data values




## Table-Formats {.smaller}
### 4 key features

2. **Delimiter**: 
    * A character used to separate the entries in each line
    * Delimiter character cannot be used for anything else in the file
    * Delimiter tells R when a specific entry begins and ends
    * Default delimiter is **whitespace**



## Table-Formats {.smaller}
### 4 key features

3. **Missing value**: 
    * Character string used exclusively to denote a missing value
    * When reading the file, R will turn these entries into ``NA``



## Table-Formats {.smaller}
### 4 key features

4. **Comments**:
    * Table files can include comments
    * Comment lines start with $\quad$ ``#``
    * R ignores such comments




## Table-Formats {.smaller}
### Example

- Table-Format for **Family Guy** characters can be downloaded here [family_guy.txt](datasets/family_guy.txt)


::: {.column width="54%"}

- The text file looks like this

![](images/family_guy.png){width=78%}

:::

::: {.column width="44%"}

- Remarks:
    * Header is present
    * Delimiter is **whitespace**
    * Missing values denoted by ``*``

:::



## read.table command {.smaller}

- Table-Formats can be read via ``read.table()``
    * This reads a ``.txt`` or ``.csv`` file and outputs a data frame
- Options of ``read.table()``
    * ``header = T/F`` -- Tells R if a header is present
    * ``na.strings = "string"`` -- Tells R that ``"string"`` means ``NA``



## Reading our first Table-Format file {.smaller}

To read ``family_guy.txt`` into R proceed as follows:

1. Download [family_guy.txt](datasets/family_guy.txt) and move file to Desktop

2. Open the R Console and change working directory to **Desktop**

```r
# In MacOS type
setwd("~/Desktop")

# In Windows type
setwd("C:/Users/YourUsername/Desktop")
```


## Reading our first Table-Format file {.smaller}


3. Read ``family_guy.txt`` into R and store it in data frame ``family`` with code

```r
family = read.table(file = "family_guy.txt",
                    header = TRUE,
                    na.strings = "*"
                    )
```

4. Note that we are telling ``read.table()`` that
    * ``family_guy.txt`` has a header
    * Missing values are denoted by ``*``



## Reading our first Table-Format file {.smaller}


::: {.column width="48%"}
5. Print data frame ``family`` to screen

```r
print(family)
```

```{r}
family = read.table(file = "datasets/family_guy.txt",
                    header = TRUE,
                    na.strings = "*"
                    )
print(family)
```

:::

::: {.column width="48%"}

- For comparison this is the ``.txt`` file

![](images/family_guy.png){width=85%}

:::





## Application: t-test {.smaller}

**Example**: Analysis of Consumer Confidence Index for 2008 crisis from Lecture 4

- We imported data into R using ``c()``
- This is ok for small datasets
- Suppose the CCI data is stored in a ``.txt`` file instead


**Goal**: Perform t-test on CCI difference for mean difference $\mu = 0$

- By reading CCI data into R using ``read.table()``
- By manipulating CCI data using **data frames**




## Application: t-test {.smaller}

- The CCI dataset can be downloaded here [2008_crisis.txt](datasets/2008_crisis.txt)

- The text file looks like this

![](images/2008_crisis.png){width=78%}



## Application: t-test {.smaller}

To perform the t-test on data ``2008_crisis.txt`` we proceed as follows:

1. Download dataset [2008_crisis.txt](datasets/2008_crisis.txt) and move file to Desktop

2. Open the R Console and change working directory to **Desktop**

```r
# In MacOS type
setwd("~/Desktop")

# In Windows type
setwd("C:/Users/YourUsername/Desktop")
```

3. Read ``2008_crisis.txt`` into R and store it in data frame ``scores`` with code

```r
scores = read.table(file = "2008_crisis",
                    header = TRUE
                    )
```


## Application: t-test {.smaller}

4. Store 2nd and 3rd columns of ``scores`` into 2 vectors

```r
# CCI from 2007 is stored in 2nd column
score_2007 <- scores[, 2]

# CCI from 2009 is stored in 3nd column
score_2009 <- scores[, 3]
```


5. Now the t-test can be performed as done in Lecture 4

```r
# Compute vector of differences
difference <- score_2007 - score_2009

# Perform t-test on difference with null hypothesis mu = 0
t.test(difference, mu = 0)
```



## Application: t-test {.smaller}

6. We obtain the same result of Lecture 4
    * p-value is $p < 0.05$
    * Reject $H_0$: The mean difference is not $0$
    * In details, the output of ``t.test`` is below

- For convenience you can download the full code [2008_crisis_code.R](codes/2008_crisis_code.R)

```{r}
# Read ``2008_crisis.txt`` into R and store in "scores"
scores = read.table(file = "datasets/2008_crisis.txt",
                    header = TRUE
                    )

# Access scores of 2007 and 2009 in 2 vectors
score_2007 <- scores[, 2]
score_2009 <- scores[, 3]

# Compute difference
difference <- score_2007 - score_2009

# Perform t-test on difference with null hypothesis mu = 0
t.test(difference, mu = 0)
```




# Part 8: <br>Least squares {background-color="#cc0164" visibility="uncounted"}

::: footer

<div color="#cc0164">  </div>

:::





## Example: Blood Pressure {.smaller}

::: {.column width="58%"}

$10$ patients treated with both Drug A and Drug B

- These drugs cause change in blood pressure
- Patients are given the drugs one at a time
- Changes in blood pressure are recorded
- For patient $i$ we denote by
  * $x_i$ the change caused by Drug A
  * $y_i$ the change caused by Drug B

:::

::: {.column width="40%"}


| $i$   |  $x_i$  |  $y_i$ |
|:-----:|:-------:|:------:|
|  $1$  |  $1.9$  |  $0.7$ |
|  $2$  |  $0.8$  |  $-1.0$|
|  $3$  |  $1.1$  |  $-0.2$|
|  $4$  |  $0.1$  |  $-1.2$|
|  $5$  |  $-0.1$ |  $-0.1$|
|  $6$  |  $4.4$  |  $3.4$ |
|  $7$  |  $4.6$  |  $0.0$ |
|  $8$  |  $1.6$  |  $0.8$ |
|  $9$  |  $5.5$  |  $3.7$ |
|  $10$ |  $3.4$  |  $2.0$ |
: {tbl-colwidths="[30,35,35]"}

:::




## Example: Blood Pressure {.smaller}

::: {.column width="50%"}

**Goal:**

- Predict reaction to Drug B, knowing reaction to Drug A
- This means predict $y_i$ from $x_i$


**Plot:**

- To visualize data we can plot pairs $(x_i,y_i)$
- Points seem to align
- It seems there is a linear relation between $x_i$ and $y_i$

:::

::: {.column width="48%"}

```{r}
#| echo: false
#| fig-asp: 1

# Read the data
x <- c(1.9, 0.8, 1.1, 0.1, -0.1, 4.4, 4.6, 1.6, 5.5, 3.4)
y <- c(0.7, -1.0, -0.2, -1.2, -0.1, 3.4, 0.0, 0.8, 3.7, 2.0)

# Create the plot
plot(x, y, xlab = "", ylab = "", pch = 16, cex = 2)

# Add labels
mtext("Drug A reaction x_i", side = 1, line = 3, cex = 2.1)
mtext("Drug B reaction y_i", side = 2, line = 2.5, cex = 2.1)
```

:::






## Example: Blood Pressure {.smaller}

::: {.column width="50%"}

**Linear relation:**

- Try to fit a line through the data
- Line roughly predicts $y_i$ from $x_i$
- However note the outlier
$$(x_7,y_7) = (4.6, 0)$$
(red point) 

- How is such line constructed?

:::

::: {.column width="48%"}

```{r}
#| echo: false
#| fig-asp: 1

# Read the data
x <- c(1.9, 0.8, 1.1, 0.1, -0.1, 4.4, 4.6, 1.6, 5.5, 3.4)
y <- c(0.7, -1.0, -0.2, -1.2, -0.1, 3.4, 0.0, 0.8, 3.7, 2.0)

# Create the plot
plot(x, y, xlab = "", ylab = "", pch = 16, cex = 2)

# Add labels
mtext("Drug A reaction x_i", side = 1, line = 3, cex = 2.1)
mtext("Drug B reaction y_i", side = 2, line = 2.5, cex = 2.1)

# Fit linear regression
fit <- lm(y ~ x)

# Plot regression line in red
abline(fit, col = "red", lwd = 5)

# Highlight outlier
points(4.6, 0, pch = 16, cex = 2, col = "red")
```

:::





## Example: Blood Pressure {.smaller}

::: {.column width="50%"}

**Least Squares Line:**

- A general line has equation
$$
y = \beta x + \alpha
$$
for some 
  * **slope** $\beta$
  * **intercept** $\alpha$

- Value predicted by the line for $x_i$ is
$$
\hat{y}_i = \beta x_i + \alpha
$$

:::

::: {.column width="48%"}

```{r}
#| echo: false
#| fig-asp: 1

# Read the data
x <- c(1.9, 0.8, 1.1, 0.1, -0.1, 4.4, 4.6, 1.6, 5.5, 3.4)
y <- c(0.7, -1.0, -0.2, -1.2, -0.1, 3.4, 0.0, 0.8, 3.7, 2.0)

# Create the plot
plot(x, y, xlab = "", ylab = "", pch = 16, cex = 2)

# Add labels
mtext("Drug A reaction x_i", side = 1, line = 3, cex = 2.1)
mtext("Drug B reaction y_i", side = 2, line = 2.5, cex = 2.1)

# Fit linear regression
fit <- lm(y ~ x)

# Plot regression line in red
abline(fit, col = "red", lwd = 5)

# Fit linear regression
fit <- lm(y ~ x)

# Plot regression line in red
abline(fit, col = "red", lwd = 5)

# Calculate predicted values
predicted <- predict(fit)

# Plot vertical distances in gray
segments(x, y, x, predicted, col = "gray", lwd = 2)
```
:::






## Example: Blood Pressure {.smaller}

::: {.column width="50%"}

**Least Squares Line:**

- We would like predicted and actual value to be close
$$
\hat{y}_i \approx y_i
$$


- Hence the **vertical** difference has to be small
$$
y_i - \hat{y}_i \approx 0
$$


:::

::: {.column width="48%"}

```{r}
#| echo: false
#| fig-asp: 1

# Read the data
x <- c(1.9, 0.8, 1.1, 0.1, -0.1, 4.4, 4.6, 1.6, 5.5, 3.4)
y <- c(0.7, -1.0, -0.2, -1.2, -0.1, 3.4, 0.0, 0.8, 3.7, 2.0)

# Create the plot
plot(x, y, xlab = "", ylab = "", pch = 16, cex = 2)

# Add labels
mtext("Drug A reaction x_i", side = 1, line = 3, cex = 2.1)
mtext("Drug B reaction y_i", side = 2, line = 2.5, cex = 2.1)

# Fit linear regression
fit <- lm(y ~ x)

# Plot regression line in red
abline(fit, col = "red", lwd = 5)

# Fit linear regression
fit <- lm(y ~ x)

# Plot regression line in red
abline(fit, col = "red", lwd = 5)

# Calculate predicted values
predicted <- predict(fit)

# Plot vertical distances in gray
segments(x, y, x, predicted, col = "gray", lwd = 2)
```
:::





## Example: Blood Pressure {.smaller}

::: {.column width="50%"}

**Least Squares Line:**

- We want 
$$
\hat{y}_i - y_i \approx 0 \,, \qquad \forall \, i
$$

- Can be achieved by minimizing the sum of squares
$$
\min_{\alpha, \beta} \ \sum_{i} \ (y_i - \hat{y}_i)^2
$$
$$
\hat{y}_i = \beta x_i + \alpha
$$

:::

::: {.column width="48%"}

```{r}
#| echo: false
#| fig-asp: 1

# Read the data
x <- c(1.9, 0.8, 1.1, 0.1, -0.1, 4.4, 4.6, 1.6, 5.5, 3.4)
y <- c(0.7, -1.0, -0.2, -1.2, -0.1, 3.4, 0.0, 0.8, 3.7, 2.0)

# Create the plot
plot(x, y, xlab = "", ylab = "", pch = 16, cex = 2)

# Add labels
mtext("Drug A reaction x_i", side = 1, line = 3, cex = 2.1)
mtext("Drug B reaction y_i", side = 2, line = 2.5, cex = 2.1)

# Fit linear regression
fit <- lm(y ~ x)

# Plot regression line in red
abline(fit, col = "red", lwd = 5)

# Fit linear regression
fit <- lm(y ~ x)

# Plot regression line in red
abline(fit, col = "red", lwd = 5)

# Calculate predicted values
predicted <- predict(fit)

# Plot vertical distances in gray
segments(x, y, x, predicted, col = "gray", lwd = 2)
```
:::





## Residual Sum of Squares {.smaller}

::: Definition

Let $(x_1,y_1), \ldots, (x_n, y_n)$ be a set of $n$ pair of points. Consider the line
$$
y = \beta x + \alpha
$$
The Residual Sum of Squares associated to the line is
$$
\RSS (\alpha,\beta) := \sum_{i=1}^n (y_i-\alpha-{\beta}x_i)^2
$$

:::


**Note:** $\RSS$ can be seen as a function
$$
\RSS \colon \R^2 \to \R   \qquad \quad \RSS = \RSS (\alpha,\beta)
$$


## $\RSS(\alpha,\beta)$ for Blood Pressure data {.smaller}

```{r}
library(plotly)

# Function to calculate RSS
calculate_RSS <- function(alpha, beta, x, y) {
  y_pred <- alpha + beta * x
  rss <- sum((y - y_pred)^2)
  return(rss)
}

# Define a grid of alpha and beta values
alpha <- seq(-2, 2, length.out = 100)
beta <- seq(-2, 2, length.out = 100)

# Create a grid of alpha and beta values
grid <- expand.grid(alpha = alpha, beta = beta)

# Calculate RSS for each combination of alpha and beta
rss_values <- mapply(calculate_RSS, grid$alpha, grid$beta, MoreArgs = list(x = c(1.9, 0.8, 1.1, 0.1, -0.1, 4.4, 4.6, 1.6, 5.5, 3.4), y = c(0.7, -1.0, -0.2, -1.2, -0.1, 3.4, 0.0, 0.8, 3.7, 2.0)))

# Reshape RSS values to a matrix
rss_matrix <- matrix(rss_values, nrow = length(alpha))

# Define the data for the surface plot
x_vals <- alpha
y_vals <- beta
z_matrix <- rss_matrix

# Create a 3D surface plot using plot_ly
plot_ly(
  x = x_vals,
  y = y_vals,
  z = z_matrix,
  type = "surface",
  colors = "viridis",
  showscale = FALSE
) %>% 
  layout(
    scene = list(
      xaxis = list(title = "Alpha"),
      yaxis = list(title = "Beta"),
      zaxis = list(title = "RSS"),
      camera = list(
        eye = list(x = 1.87, y = 0.88, z = 0.64)
      )
    ),
    width = 800,
    height = 600
  )

```





## Summary statistics {.smaller}

For a given sample $(x_1,y_1), \ldots, (x_n, y_n)$, define


::: {style="font-size: 0.94em"}

- **Sample Means:**
$$
\overline{x} := \frac{1}{n}  \sum_{i=1}^n x_i \qquad \quad 
\overline{y} := \frac{1}{n}  \sum_{i=1}^n y_i
$$


- **Sums of squares:**
$$
S_{xx} :=   \sum_{i=1}^n ( x_i - \overline{x} )^2 \qquad \quad 
S_{yy} :=   \sum_{i=1}^n ( y_i - \overline{y} )^2
$$

- **Sum of cross-products:**
$$
S_{xy} :=   \sum_{i=1}^n ( x_i - \overline{x} ) ( y_i - \overline{y} )
$$

:::



## Minimizing the RSS {.smaller}

::: Theorem

Given $(x_1,y_1), \ldots, (x_n, y_n)$, consider the minimization problem
\begin{equation}   \tag{M}
\min_{\alpha,\beta } \ \RSS =  \min_{\alpha,\beta} \ \sum_{i=1}^n (y_i-\alpha-{\beta}x_i)^2
\end{equation}
Then

1. There exists a unique line solving (M)
2. Such line has the form $y = \hat{\beta} x + \hat{\alpha}$ with
$$
\hat{\beta} = \frac{S_{xy}}{S_{xx}} \qquad \qquad 
\hat{\alpha} = \overline{y} - \hat{\beta} \ \overline{x}
$$
:::





## Positive semi-definite matrix {.smaller}

To prove the Theorem we need some background results

- A symmetric matrix is **positive semi-definite** if all the eigenvalues $\lambda_i$ satisfy 
$$
\lambda_i \geq 0
$$

- **Proposition:** A $2 \times 2$ symmetric matrix $M$ is **positive semi-definite** iff
$$
\det M \geq 0 \,, \qquad \quad \operatorname{Tr}(M) \geq 0 
$$




## Positive semi-definite Hessian {.smaller}


- Suppose given a smooth function of 2 variables

$$
f \colon \R^2 \to \R \qquad \quad f = f (x,y)
$$


- The Hessian of $f$ is the matrix

$$
\nabla^2 f = 
\left(  
\begin{array}{cc}
f_{xx} & f_{xy} \\
f_{yx} & f_{yy} \\
\end{array}
\right)
$$


## Positive semi-definite Hessian {.smaller}

- In particular the Hessian is **positive semi-definite** iff

$$
\det \nabla^2 f = f_{xx} f_{yy} - f_{xy}^2 \geq 0 \qquad \quad
f_{xx} + f_{yy} \geq 0
$$


- **Side Note:** For $C^2$ functions it holds that

$$
\nabla^2 f \, \text{ is positive semi-definite} \qquad \iff \qquad  
f \, \text{ is convex}
$$




## Optimality conditions {.smaller}

::: Lemma

Suppose $f \colon \R^2 \to \R$ has positive semi-definite Hessian. They are equivalent

1. The point $(\hat{x},\hat{y})$ is a minimizer of $f$, that is,
$$
f(\hat{x}, \hat{y}) = \min_{x,y} \ f(x,y)
$$

2. The point $(\hat{x},\hat{y})$ satisfies the **optimality conditions**
$$
\nabla f (\hat{x},\hat{y}) = 0
$$

:::


**Note**: The proof of the above Lemma can be found in [@fusco-marcellini-sbordone]




## Example {.smaller}

- The main example of strictly convex function in 2D is 

$$
f(x,y) = x^2 + y^2
$$


- It is clear that
$$
\min_{x,y} \ f(x,y) = \min_{x,y} \ x^2 + y^2 = 0 \,,
$$
with the only minimizer being $(0,0)$


- However, let us use the Lemma to prove this fact



##  {.smaller}

- The gradient of $f = x^2 + y^2$ is

$$
\nabla f = (f_x,f_y) = (2x, 2y)
$$

- Therefore the optimality condition has unique solution

$$
\nabla f = 0 \qquad \iff \qquad x = y = 0
$$



##  {.smaller}

- The Hessian of $f$ is 

$$
\nabla^2 f =
\left( 
\begin{array}{cc}
f_{xx} & f_{xy} \\
f_{yx} & f_{yy}
\end{array}
\right) 
=
\left( 
\begin{array}{cc}
2 & 0 \\
0 & 2
\end{array}
\right) 
$$

- The Hessian is positive semi-definite since

$$
\det (\nabla^2) f = 4 > 0 \qquad \qquad \operatorname{Tr}(\nabla^2 f)  = 4 > 0
$$

- By the Lemma, we conclude that $(0,0)$ is the unique minimizer of $f$, that is,

$$
0 = f(0,0) = \min_{x,y} \ f(x,y) 
$$






## Minimizing the RSS {.smaller}
### Proof of Theorem

- We go back to proving the RSS Minimization Theorem

- Suppose given data points $(x_1,y_1), \ldots, (x_n, y_n)$

- We want to solve the minimization problem

\begin{equation}   \tag{M}
\min_{\alpha,\beta } \ \RSS =  \min_{\alpha,\beta} \ \sum_{i=1}^n (y_i-\alpha-{\beta}x_i)^2
\end{equation}

- In order to use the Lemma we need to compute

$$
\nabla \RSS  \quad \text{ and } \quad 
\nabla^2 \RSS
$$



## Minimizing the RSS {.smaller}
### Proof of Theorem


- We first compute $\nabla \RSS$ and solve the optimality conditions
$$
\nabla \RSS (\alpha,\beta) = 0 
$$


- To this end, recall that 
$$
\overline{x} := \frac{\sum_{i=1}^nx_i}{n} \qquad \implies \qquad  \sum_{i=1}^n x_i =   n \overline{x}
$$

- Similarly, we have 
$$
\sum_{i=1}^n y_i =   n \overline{y}
$$



## Minimizing the RSS {.smaller}
### Proof of Theorem


- Therefore we get

\begin{align*}
\RSS_{\alpha} & = -2\sum_{i=1}^n(y_i- \alpha- \beta x_i) \\[10pt]
              & = - 2 n \overline{y} + 2n \alpha + 2 \beta n \overline{x} \\[20pt]
\RSS_{\beta} & = -2\sum_{i=1}^n x_i (y_i- \alpha - \beta x_i) \\[10pt]
             & =  - 2 \sum_{i=1}^n x_i y_i + 2 \alpha n \overline{x} + 2 \beta \sum_{i=1}^n x_i^2
\end{align*}




## Minimizing the RSS {.smaller}
### Proof of Theorem



- Hence the optimality conditions are

\begin{align}
 - 2 n \overline{y} + 2n \alpha + 2 \beta n \overline{x} & = 0  \tag{1} \\[20pt]
- 2 \sum_{i=1}^n x_i y_i + 2 \alpha n \overline{x} + 2 \beta \sum_{i=1}^n x_i^2 & = 0 \tag{2}
\end{align}






## Minimizing the RSS {.smaller}
### Proof of Theorem


- Equation (1) is

$$
-2 n \overline{y} + 2n \alpha + 2  \beta n \overline{x} = 0
$$

- By simplifying and rearraging, we find that (1) is equivalent to

$$
\alpha =  \overline{y}- \beta \overline{x}
$$




## Minimizing the RSS {.smaller}
### Proof of Theorem

- Equation (2) is equivalent to

$$
\sum_{i=1}^n x_i y_i - \alpha n \overline{x}  - \beta \sum_{i=1}^n x^2_i = 0
$$

- From the previous slide we have $\alpha =  \overline{y}- \beta \overline{x}$


## Minimizing the RSS {.smaller}
### Proof of Theorem

- Substituting in Equation (2) we get
\begin{align*}
0 & = \sum_{i=1}^n x_i y_i - \alpha n \overline{x}  - \beta \sum_{i=1}^n x^2_i \\
  & = \sum_{i=1}^n x_i y_i - n \overline{x} \, \overline{y}  + \beta n \overline{x}^2 - \beta \sum_{i=1}^n x^2_i \\
  & =  \sum_{i=1}^n (x_i y_i - \overline{x} \, \overline{y} ) - \beta  \left(  \sum_{i=1}^n x^2_i - n\overline{x}^2 \right)  = S_{xy} - \beta S_{xx} 
\end{align*}
where we used the usual identity 
$S_{xx} = \sum_{i=1}^n ( x_i - \overline{x})^2 =  \sum_{i=1}^n x_i^2 - n\overline{x}^2$


## Minimizing the RSS {.smaller}
### Proof of Theorem

- Hence Equation (2) is equivalent to
$$
 \beta = \frac{S_{xy}}{ S_{xx} }
$$

- Also recall that Equation (1) is equivalent to
$$
\alpha =  \overline{y}- \beta \overline{x}
$$

- Therefore $(\hat\alpha, \hat\beta)$ solves the optimality conditions $\nabla \RSS = 0$ iff
$$
\hat\alpha =  \overline{y}- \hat\beta \overline{x} \,, \qquad \quad 
\hat\beta = \frac{S_{xy}}{ S_{xx} }
$$



## Minimizing the RSS {.smaller}
### Proof of Theorem

- We need to compute $\nabla^2 \RSS$ 

- To this end recall that
$$
\RSS_{\alpha} = - 2 n \overline{y} + 2n \alpha + 2 \beta n \overline{x} \,,
\quad 
\RSS_{\beta} =  - 2 \sum_{i=1}^n x_i y_i + 2 \alpha n \overline{x} + 2 \beta \sum_{i=1}^n x_i^2
$$

- Therefore we have
\begin{align*}
\RSS_{\alpha \alpha} & = 2n \qquad   & \RSS_{\alpha \beta} & =  2 n \overline{x} \\ 
\RSS_{\beta \alpha } & =  2 n \overline{x} \qquad     & \RSS_{\beta \beta} & =  2 \sum_{i=1}^{n} x_i^2
\end{align*}



## Minimizing the RSS {.smaller}
### Proof of Theorem

- The Hessian determinant is 

\begin{align*}
\det (\nabla^2 \RSS) & = \RSS_{\alpha \alpha}\RSS_{\beta \beta} -  \RSS_{\alpha \beta}^2  \\[10pt]
                   & = 4n \sum_{i=1}^{n} x_i^2 - 4 n^2 \overline{x}^2  \\[10pt]
                   & = 4n \left(  \sum_{i=1}^{n} x_i^2  - n \overline{x}^2 \right) \\[10pt]
                   & = 4n S_{xx}
\end{align*}



## Minimizing the RSS {.smaller}
### Proof of Theorem

- Recall that 

$$
S_{xx} = \sum_{i=1}^n (x_i - \overline{x})^2 \geq 0
$$

- Therefore we have

$$
\det (\nabla^2 \RSS) = 4n S_{xx} \geq 0
$$




## Minimizing the RSS {.smaller}
### Proof of Theorem


- We also have

$$
\operatorname{Tr}(\nabla^2\RSS) = \RSS_{\alpha \alpha} + \RSS_{\beta \beta}  = 2n + 2 \sum_{i=1}^{n} x_i^2 \geq 0
$$

- Therefore we have proven 
$$
\det( \nabla^2 \RSS) \geq 0 \,, \qquad \quad 
\operatorname{Tr}(\nabla^2\RSS) \geq 0
$$

- As the Hessian is symmetric, we conclude that $\nabla^2 \RSS$ is positive semi-definite



## Minimizing the RSS {.smaller}
### Proof of Theorem


- By the Lemma, we have that all the solutions $(\alpha,\beta)$ to the optimality conditions 
$$
\nabla \RSS (\alpha,\beta) = 0
$$
are minimizers

- Therefore $(\hat \alpha,\hat\beta)$ with
$$\hat\alpha =  \overline{y}- \hat\beta \overline{x} \,, \qquad \quad 
\hat\beta = \frac{S_{xy}}{ S_{xx} }
$$
is a minimizer of $\RSS$, ending the proof





## Least-squares line {.smaller}

The previous Theorem motivates the following definition


::: Definition

Given $(x_1,y_1), \ldots, (x_n, y_n)$, the **least-squares line** is 
$$
y = \hat\beta x + \hat \alpha
$$
where we define
$$
\hat{\alpha} = \overline{y} - \hat{\beta} \ \overline{x} \qquad \qquad \hat{\beta} = \frac{S_{xy}}{S_{xx}}
$$

:::




# Part 9: Worked Example {background-color="#cc0164" visibility="uncounted"}

::: footer

<div color="#cc0164">  </div>

:::



## Worked Example: Blood Pressure {.smaller}
### Computing the least-squares line in R

::: {.column width="58%"}

In R, we want to do the following:

- Input the data into vectors $x$ and $y$

- Compute the least-square line coefficients
$$
\hat{\alpha} = \overline{y} - \hat{\beta} \ \overline{x} \qquad \qquad \hat{\beta} = \frac{S_{xy}}{S_{xx}}
$$

- Plot the data points $(x_i,y_i)$

- Overlay the least squares line

:::

::: {.column width="40%"}

::: {style="font-size: 0.9em"}

| $i$   |  $x_i$  |  $y_i$ |
|:-----:|:-------:|:------:|
|  $1$  |  $1.9$  |  $0.7$ |
|  $2$  |  $0.8$  |  $-1.0$|
|  $3$  |  $1.1$  |  $-0.2$|
|  $4$  |  $0.1$  |  $-1.2$|
|  $5$  |  $-0.1$ |  $-0.1$|
|  $6$  |  $4.4$  |  $3.4$ |
|  $7$  |  $4.6$  |  $0.0$ |
|  $8$  |  $1.6$  |  $0.8$ |
|  $9$  |  $5.5$  |  $3.7$ |
|  $10$ |  $3.4$  |  $2.0$ |
: {tbl-colwidths="[30,35,35]"}

:::

:::




::: {.content-hidden}

## First Solution {.smaller}


:::



## First Solution {.smaller}

- We give a first solution using elementary R functions

- The code to input the data into a data-frame is as follows

```r
# Input blood pressure changes data into data-frame

changes <- data.frame(drug_A = c(1.9, 0.8, 1.1, 0.1, -0.1, 
                                 4.4, 4.6, 1.6, 5.5, 3.4),
                      drug_B = c(0.7, -1.0, -0.2, -1.2, -0.1, 
                                 3.4, 0.0, 0.8, 3.7, 2.0)
                     )

```

- To shorten the code we assign ``drug_A`` and ``drug_B`` to vectors ``x`` and ``y``

```r
# Assign data-frame columns to vectors x and y
x <- changes$drug_A
y <- changes$drug_B
```


## {.smaller}

- Compute averages $\overline{x}, \overline{y}$ and covariances $S_{xx}, S_{xy}$

```r
# Compute averages xbar and ybar
xbar <- mean(x)
ybar <- mean(y)

# Compute covariances S_xx and S_xy
S_xx <- var(x)
S_xy <- cov(x,y)
```




##  {.smaller}

- Compute the least-square line coefficients
$$
\hat{\beta} = \frac{S_{xy}}{S_{xx}} \,, \qquad \qquad  \hat{\alpha} = \overline{y} - \hat{\beta} \ \overline{x} 
$$

```r
# Compute least-square line coefficients
beta <- S_xy / S_xx
alpha <- ybar - beta * xbar

# Print coefficients
cat("\nCoefficient alpha =", alpha)
cat("\nCoefficient beta =", beta)
```

<br>


```{r}
# Input blood pressure changes data into data-frame

changes <- data.frame(drug_A = c(1.9, 0.8, 1.1, 0.1, -0.1, 
                                 4.4, 4.6, 1.6, 5.5, 3.4),
                      drug_B = c(0.7, -1.0, -0.2, -1.2, -0.1, 
                                 3.4, 0.0, 0.8, 3.7, 2.0)
                     )

# Assign data-frame columns to vectors x and y
x <- changes$drug_A
y <- changes$drug_B

# Compute averages xbar and ybar
xbar <- mean(x)
ybar <- mean(y)

# Compute covariances S_xx and S_xy
S_xx <- var(x)
S_xy <- cov(x,y)

# Compute least-square line coefficients
beta <- S_xy / S_xx
alpha <- ybar - beta * xbar

# Print coefficients
cat("\nCoefficient alpha =", alpha)
cat("\nCoefficient beta =", beta)
```



##  {.smaller}

- Plot the data pairs $(x_i,y_i)$

```r
# Plot the data
plot(x, y, xlab = "", ylab = "", pch = 16, cex = 2)

# Add labels
mtext("Drug A reaction x_i", side = 1, line = 3, cex = 2.1)
mtext("Drug B reaction y_i", side = 2, line = 2.5, cex = 2.1)
```

**Note:** We have added a few cosmetic options

- ``pch = 16`` plots points with black circles
- ``cex = 2`` stands for *character expansion* -- Specifies width of points
- ``mtext`` is used to fine-tune the axis labels
  * ``side = 1`` stands for x-axis
  * ``side = 2`` stands for y-axis
  * ``line`` specifies distance of label from axis



## {.smaller}

::: {style="font-size: 0.93em"}

- To plot a line $y = bx + a$
    * ``abline(a, b)`` 

- Overlay the least squares line $y = \hat{\beta}x + \hat{\alpha}$


```r
# Overlay least-squares line
abline(a = alpha, b = beta, col = "red", lwd = 3)
```

- **Note:** Cosmetic options
  * ``col`` specifies color of the plot
  * ``lwd`` specifies line width


- For clarity, we can add legend to plot
```r
# Add legend
legend("topleft", 
       legend = c("Data", "Least-Squares Line"), 
       col = c("black", "red"), 
       pch = c(16, NA), 
       lty = c(NA, 1), 
       lwd = c(NA, 3))
```

:::



##  {.smaller}


- The code can be downloaded here [least_squares_1.R](codes/least_squares_1.R)

- Running the code we obtain the plot below


```{r}
#| echo: false
#| fig-asp: 1

# Input blood pressure changes data into data-frame
changes <- data.frame(drug_A = c(1.9, 0.8, 1.1, 0.1, -0.1, 
                                 4.4, 4.6, 1.6, 5.5, 3.4),
                      drug_B = c(0.7, -1.0, -0.2, -1.2, -0.1, 
                                 3.4, 0.0, 0.8, 3.7, 2.0)
                     )

# Assign data-frame columns to vectors x and y
x <- changes$drug_A
y <- changes$drug_B

# Compute averages xbar and ybar
xbar <- mean(x)
ybar <- mean(y)

# Compute covariances S_xx and S_xy
S_xx <- var(x)
S_xy <- cov(x,y)

# Compute least-square line coefficients
beta <- S_xy / S_xx
alpha <- ybar - beta * xbar

# Plot the data
plot(x, y, xlab = "", ylab = "", pch = 16, cex = 2)

# Add labels
mtext("Drug A reaction x_i", side = 1, line = 3, cex = 2.1)
mtext("Drug B reaction y_i", side = 2, line = 2.5, cex = 2.1)

# Overlay least-squares line
abline(a = alpha, b = beta, col = "red", lwd = 3)

# Add legend
legend("topleft", 
       legend = c("Data", "Least-Squares Line"), 
       col = c("black", "red"), 
       pch = c(16, NA), 
       lty = c(NA, 1), 
       lwd = c(NA, 3))
```





## Second Solution {.smaller}


- The second solution uses the R function ``lm``
- ``lm`` stands for **linear model**
- First we input the data into a data-frame

```r
# Input blood pressure changes data into data-frame
changes <- data.frame(drug_A = c(1.9, 0.8, 1.1, 0.1, -0.1, 
                                 4.4, 4.6, 1.6, 5.5, 3.4),
                      drug_B = c(0.7, -1.0, -0.2, -1.2, -0.1, 
                                 3.4, 0.0, 0.8, 3.7, 2.0)
                     )
```




## {.smaller}


- Use ``lm`` to fit the least-squares line
  * ``lm(formula, data)``
  * ``data`` expects a data-frame in input
  * ``formula`` stands for the relation to fit

- In the case of least-squares:
  * ``formula = y ~ x``
  * ``x`` and ``y`` are names of two variables in the data-frame
  * Symbol `y ~ x` can be read as: *$y$ modelled as function of $x$*




*Note:* Storing data in data-frame is optional

- We can just store data in vectors ``x`` and ``y``

- Then fit the least-squares line with ``lm(y ~ x)``




##  {.smaller}

- The command to fit the least-squares line on ``changes`` is

```r
# Fit least squares line
least_squares <- lm(formula = drug_B ~ drug_A, data = changes) 

# Print output
print(least_squares)
```


```{r}
# Input blood pressure changes data into data-frame
changes <- data.frame(drug_A = c(1.9, 0.8, 1.1, 0.1, -0.1, 
                                 4.4, 4.6, 1.6, 5.5, 3.4),
                      drug_B = c(0.7, -1.0, -0.2, -1.2, -0.1, 
                                 3.4, 0.0, 0.8, 3.7, 2.0)
                     )

least_squares <- lm(formula = drug_B ~ drug_A, data = changes) 

print(least_squares)
```

<br>
- The above tells us that the estimators are 

$$
\hat \alpha = -0.7861 \,, \qquad \quad \hat \beta = 0.6850
$$





##  {.smaller}

- We can now plot the data with the following command
  * 1st coordinate is the vector ``changes$drug_A``
  * 2nd coordinate is the vector ``changes$drug_B``

```r
# Plot data 
plot(changes$drug_A, changes$drug_B, pch = 16, cex = 2)
```


<br>


- The least-squares line is currently stored in ``least_squares``

- To add the line to the current plot use ``abline``

```r    
# Plot least-squares line
abline(least_squares, col = "red", lwd = 3)
```



##  {.smaller}


- The code can be downloaded here [least_squares_2.R](codes/least_squares_2.R)

- Running the code we obtain the plot below

```{r}
#| echo: false
#| fig-asp: 1

# Input blood pressure changes data into data-frame
changes <- data.frame(drug_A = c(1.9, 0.8, 1.1, 0.1, -0.1, 
                                 4.4, 4.6, 1.6, 5.5, 3.4),
                      drug_B = c(0.7, -1.0, -0.2, -1.2, -0.1, 
                                 3.4, 0.0, 0.8, 3.7, 2.0)
                     )

# Fit least-squares line
least_squares <- lm(formula = drug_B ~ drug_A, data = changes) 

# Plot data 
plot(changes$drug_A, changes$drug_B, pch = 16, cex = 2)

# Plot least-squares line
abline(least_squares, col = "red", lwd = 3)
```





## References