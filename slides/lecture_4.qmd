---
title: "Statistical Models"
subtitle: "Lecture 4"
from: markdown+emoji
author: 
    - name: Dr. Silvio Fanzon
      id: sf
      email: S.Fanzon@hull.ac.uk
      url: https://www.silviofanzon.com
      affiliations: University of Hull
---



::: {.content-hidden}
$
{{< include macros.tex >}}
$
:::




# Lecture 4: <br>Hypothesis tests in R <br> Part 1 {background-color="#cc0164" visibility="uncounted"}

::: footer

<div color="#cc0164">  </div>

:::





## Outline of Lecture 4


1. 






# Part 5: <br>The t-test in R {background-color="#cc0164" visibility="uncounted"}

::: footer

<div color="#cc0164">  </div>

:::





## t-test in R {.smaller}

- We are now ready to do some statistics in R
- We start by looking at the **t-test**
- Specifically, to the **One-sample Two-sided t-test**



**Goal of t-test**: Estimate mean $\mu$ of normal population $N(\mu,\sigma^2)$. If $\mu_0$ is guess for $\mu$
$$
H_0 \colon \mu = \mu_0 \qquad H_1 \colon \mu \neq \mu_0
$$

**Method**: Given sample $X_1 ,\ldots,X_n$ we look at the statistics
$$
T = \frac{\overline{X}-\mu_0}{S/\sqrt{n}} \sim t_{n-1}
$$




## t-test by hand {.smaller}


1. Given the data $x_1,\ldots,x_n$, compute the **t-statistic**
$$
t = \frac{\text{estimate } - \text{ hypothesised value}}{\ese}
= \frac{\overline x - \mu_0}{s/\sqrt{n}}
$$
with **sample mean** and **sample standard deviation**
$$
\overline{x} = \frac{1}{n} \sum_{i=1}^n x_i \,, \qquad 
s = \sqrt{\frac{\sum_{i=1}^n x_i^2 - n \overline{x}^2}{n-1}}
$$

2. Find the critical value $t^* = t_{n-1}(0.025)$ in [Statistical Table 13.1](files/Statistics_Tables.pdf)
  * If $|t|>t^*$ reject $H_0$. The mean is not $\mu_0$
  * If $|t| \leq t^*$ do not reject $H_0$. There is not enough evidence







## t-test {.smaller}


1. Given the sample $x_1,\ldots,x_n$, R can compute the **t-statistic**
$$
t = \frac{\text{estimate } - \text{ hypothesised value}}{\ese}
= \frac{\overline x - \mu_0}{s/\sqrt{n}}
$$

2. R can compute the precise p-value (no need for Statistical Tables)
$$
p = 2P(|t_{n-1}|>t)
$$
  * If $p < 0.05$ reject $H_0$. The mean is not $\mu_0$
  * If $p \geq 0.05$ do not reject $H_0$. There is not enough evidence


**Note:** The above operations can be done at the same time by command ``t.test``


## t-test code in R {.smaller}


1. Store the sample $x_1,\ldots,x_n$ in an R vector using  
    * ``data_vector <- c(x1, ..., xn)``

2. Perform a two-sided t-test on ``data_vector`` with null hypothesis ``mu0`` using
    * ``t.test(data_vector, mu = mu0)``

3. Read output. R will tell you
    * t-statistic
    * degrees of freedom
    * p-value
    * alternative hypothesis
    * confidence interval (where true mean is likely to be)
    * sample mean



## t-test command {.smaller}

Relevant options of ``t.test`` are

1. ``mu = mu0 `` tells R to test null hypothesis
$$
H_0 \colon \mu = \mu_0
$$

2. If ``mu = mu0`` is not specified, R assumes $\mu_0 = 0$

3. ``alternative = "greater"`` tells R to perform one-sided t-test
$$
H_0 \colon \mu > \mu_0
$$




## t-test command {.smaller}

4. ``alternative = "smaller"`` tells R to perform one-sided t-test
$$
H_0 \colon \mu < \mu_0
$$

5. ``conf.level = n`` changes the confidence interval level to ``n`` (default is $0.95$)




## Example: 2008 crisis {.smaller}

Let us go back to the 2008 Crisis example

- **Data:** Monthly Consumer Confidence Index (CCI) in 2007 and 2009
- **Question:** Did the crash of 2008 have lasting impact upon CCI?
- **Observation**: Data shows a massive drop in CCI between 2009 and 2007 
- **Method:** Use $t$-test to see if data is sufficient to prove that CCI actually dropped

| Month                    | J | F | M | A | M | J | J | A | S | O | N | D |
|:------------------------:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|
| CCI 2007                 |86 | 86| 88| 90| 99| 97| 97| 96| 99| 97| 90| 90|
| CCI 2009                 |24 | 22| 21| 21| 19| 18| 17| 18| 21| 23| 22| 21|
| Difference               |62 | 64| 67| 69| 80| 79| 80| 78| 78| 74| 68| 69|




## Example: 2008 crisis {.smaller}
### Setting up the test


- We want to test if there was a change in CCI from 2007 to 2009
- We interested in the difference in CCI


- The **null hypothesis** is that there was (on average) no change in CCI
$$
H_0 \colon \mu = 0 
$$
- The **alternative hypothesis** is that there was some change:
$$
H_1 \colon \mu \neq 0 
$$





## Example: 2008 crisis {.smaller}
### R code


```r
# Enter CCI data in 2 vectors using function c()
score_2007 <- c(86, 86, 88, 90, 99, 97, 97, 96, 99, 97, 90, 90)
score_2009 <- c(24, 22, 21, 21, 19, 18, 17, 18, 21, 23, 22, 21)

# Compute vector of differences in CCI
difference <- score_2007 - score_2009

# Perform t-test on difference with null hypothesis mu = 0
# Store answer in "answer"
answer -> t.test(difference, mu = 0)

# Print the answer
print(answer)
```

- Code can be downloaded here [one_sample_t_test.R](codes/one_sample_t_test.R)



## Example: 2008 crisis {.smaller}
### Output of t.test

```{r}
# Enter CCI data using c()
score_2007 <- c(86, 86, 88, 90, 99, 97, 97, 96, 99, 97, 90, 90)
score_2009 <- c(24, 22, 21, 21, 19, 18, 17, 18, 21, 23, 22, 21)

# Compute vector of differences in CCI
difference <- score_2007 - score_2009

# Perform t-test with null hypothesis mu0 = 0
t.test(difference, mu = 0)
```




## Example: 2008 crisis {.smaller}
### Analysis of Output

<br>

```{r}
# Enter CCI data using c()
score_2007 <- c(86, 86, 88, 90, 99, 97, 97, 96, 99, 97, 90, 90)
score_2009 <- c(24, 22, 21, 21, 19, 18, 17, 18, 21, 23, 22, 21)
difference <- score_2007 - score_2009

# Store output of t-test
t_test_result <- t.test(difference, mu = 0)

# Capture output from print
output <- capture.output(print(t_test_result))

# Print only one line of the output
cat(output[2])
```

<br>


- Description of the test that we have asked for
- Note: ``t.test`` has automatically assumed that a one-sample test is desired




## Example: 2008 crisis {.smaller}
### Analysis of Output


<br>

```{r}
# Enter CCI data using c()
score_2007 <- c(86, 86, 88, 90, 99, 97, 97, 96, 99, 97, 90, 90)
score_2009 <- c(24, 22, 21, 21, 19, 18, 17, 18, 21, 23, 22, 21)
difference <- score_2007 - score_2009

# Store output of t-test
t_test_result <- t.test(difference, mu = 0)

# Capture output from print
output <- capture.output(print(t_test_result))

# Print only one line of the output
cat(output[4])
```

<br>

- This says which data are being tested 
- In our case we test the data in ``difference``




## Example: 2008 crisis {.smaller}
### Analysis of Output

<br> 

```{r}
# Enter CCI data using c()
score_2007 <- c(86, 86, 88, 90, 99, 97, 97, 96, 99, 97, 90, 90)
score_2009 <- c(24, 22, 21, 21, 19, 18, 17, 18, 21, 23, 22, 21)
difference <- score_2007 - score_2009

# Store output of t-test
t_test_result <- t.test(difference, mu = 0)

# Capture output from print
output <- capture.output(print(t_test_result))

# Print only one line of the output
cat(output[5])
```

<br> 

::: {.column width="48%"}

**This is the best part:**

- $\texttt{t} = \,$ t-statistic from data
- $\texttt{df} = \,$ degrees of freedom
- $\texttt{p-value} = \,$ the exact p-value

:::

::: {.column width="48%"}

**Note:**

- You do not need Statistical Tables! 
- You see that $p < 0.05$ 
- Therefore we reject null hypothesis that the mean difference is $0$

:::



## Example: 2008 crisis {.smaller}
### Analysis of Output

<br> 

```{r}
# Enter CCI data using c()
score_2007 <- c(86, 86, 88, 90, 99, 97, 97, 96, 99, 97, 90, 90)
score_2009 <- c(24, 22, 21, 21, 19, 18, 17, 18, 21, 23, 22, 21)
difference <- score_2007 - score_2009

# Store output of t-test
t_test_result <- t.test(difference, mu = 0)

# Capture output from print
output <- capture.output(print(t_test_result))

# Print only one line of the output
cat(output[6])
```

<br> 


- R tells us the alternative hypothesis is $\mu \neq 0$
- Hence the Null hypothesis tested is $H_0 \colon \mu = 0$

- **Warning**: 
    * This message is **not** telling you to accept to alternative hypothesis
    * This message is only stating the alternative hypothesis





## Example: 2008 crisis {.smaller}
### Analysis of Output

<br> 

```{r}
# Enter CCI data using c()
score_2007 <- c(86, 86, 88, 90, 99, 97, 97, 96, 99, 97, 90, 90)
score_2009 <- c(24, 22, 21, 21, 19, 18, 17, 18, 21, 23, 22, 21)
difference <- score_2007 - score_2009

# Store output of t-test
t_test_result <- t.test(difference, mu = 0)

# Capture output from print
output <- capture.output(print(t_test_result))

# Print only one line of the output
cat(output[7])
cat(output[8])
```

<br> 



This is a $95 \%$ conﬁdence interval for the true mean:

- Confidence interval: is the set of (hypothetical) mean values from which the data do not deviate signiﬁcantly
- It is based on inverting the t-test by solving for the values of $\mu$ that cause $t$ to lie within its acceptance region 



## Example: 2008 crisis {.smaller}
### Analysis of Output

<br> 

```{r}
# Enter CCI data using c()
score_2007 <- c(86, 86, 88, 90, 99, 97, 97, 96, 99, 97, 90, 90)
score_2009 <- c(24, 22, 21, 21, 19, 18, 17, 18, 21, 23, 22, 21)
difference <- score_2007 - score_2009

# Store output of t-test
t_test_result <- t.test(difference, mu = 0)

# Capture output from print
output <- capture.output(print(t_test_result))

# Print only one line of the output
cat(output[7])
cat(output[8])
```

<br> 


- For $95 \%$ conﬁdence interval this means solving
$$
P( |t_{n-1}| < t) = 0.95 \,, \qquad 
t = \frac{\overline{x}-\mu}{\ese}
$$
- Solving wrt $\mu$ yields
$$
\overline{x} - t_{n-1}(0.025) \times \ese < \mu < 
\overline{x} + t_{n-1}(0.025) \times \ese
$$



## Example: 2008 crisis {.smaller}
### Analysis of Output

<br> 

```{r}
# Enter CCI data using c()
score_2007 <- c(86, 86, 88, 90, 99, 97, 97, 96, 99, 97, 90, 90)
score_2009 <- c(24, 22, 21, 21, 19, 18, 17, 18, 21, 23, 22, 21)
difference <- score_2007 - score_2009

# Store output of t-test
t_test_result <- t.test(difference, mu = 0)

# Capture output from print
output <- capture.output(print(t_test_result))

# Print only one line of the output
cat(output[7])
cat(output[8])
```

<br> 


- R calculated the quantities 
$$
\overline{x} \pm t_{n-1}(0.025) \times \ese
$$

- Based on the data, we conclude that the set of (hypothetical) mean values is
$$
\mu \in [68.15960, 76.50706] 
$$



## Example: 2008 crisis {.smaller}
### Analysis of Output

<br> 

```{r}
# Enter CCI data using c()
score_2007 <- c(86, 86, 88, 90, 99, 97, 97, 96, 99, 97, 90, 90)
score_2009 <- c(24, 22, 21, 21, 19, 18, 17, 18, 21, 23, 22, 21)
difference <- score_2007 - score_2009

# Store output of t-test
t_test_result <- t.test(difference, mu = 0)

# Capture output from print
output <- capture.output(print(t_test_result))

# Print only one line of the output
cat(output[9])
cat(output[10])
cat(output[11])
```

<br> 


- This is the sample mean
- You could have easily computed this with the code
    * ``mean(difference)``





## Example: 2008 crisis {.smaller}
### Conclusion


The key information is:

- We conducted a two-sided t-test for the mean difference $\mu \neq 0$
- Results give significant evidence $p<0.05$ that $\mu \neq 0$ 
- The sample mean difference $\overline{x} = 72.33333 \gg 0$
- This suggest CCI mean difference $\mu \gg 0$
- Hence consumer confidence is higher in 2007 than in 2009




# Part 6: <br>Graphics {background-color="#cc0164" visibility="uncounted"}

::: footer

<div color="#cc0164">  </div>

:::




## Graphics {.smaller}

R has extensive built in graphing functions:

- Fancier graphing functions are contained in the library ``ggplot2`` (see [link](https://ggplot2.tidyverse.org))

- However we will be using the basic built in R graphing functions



## Graphics {.smaller}
### Scatter plot


- Suppose given 2 vectors ``x`` and ``y`` of same length 
- The scatter plot of pairs $(x_i,y_i)$ can be generated with ``plot(x, y)``

**Example**: Suppose to have data of **weights** and **heights** of 6 people

- To plot **weight** against **height** code is as follows
- When you run ``plot()`` in R Console the plot will appear in a pop-up window

```{r}
#| echo: true
#| output-location: slide

# Store weight and height data in 2 vectors
weight <- c(60, 72, 57, 90, 95, 72)
height <- c(1.75, 1.80, 1.65, 1.90, 1.74, 1.91)

# Plot weight against height
plot(weight, height)
```






## Graphics {.smaller}
### Scatter plot -- Options


- You can customize your plot in many ways
- Example: you can represent points $(x_i,y_i)$ with triangles instead of circles
- This can be done by including the command 
    * ``pch = 2``
- ``pch`` stands for **plotting character**


```{r}
#| echo: true
#| output-location: slide

# Store weight and height data in 2 vectors
weight <- c(60, 72, 57, 90, 95, 72)
height <- c(1.75, 1.80, 1.65, 1.90, 1.74, 1.91)

# Plot weight against height using little triangles
plot(weight, height, pch = 2)
```





## Graphics {.smaller}
### Plotting 1D function f(x)

- Create a grid of $x$ values
$$
x = (x_1, \ldots, x_n)
$$
- Evaluate $f$ on such grid. This yields a vector
$$
y = (f(x_1), \ldots, f(x_n))
$$
- Generate a scatter plot with 
    * ``plot(x, y)``
- Use the function ``lines`` to linearly interpolate the scatter plot:
    * ``lines(x, y)``





## Graphics {.smaller}
### Plotting functions - Example

Let us plot the parabola
$$
y = x^2 \,, \qquad x \in [-1,1]
$$

```{r}
#| echo: true
#| output-location: slide

# Input vector for grid of x coordinates
x <- c(-1, -0.5, 0, 0.5, 1)

# Compute the function y=x^2 on the grid
y <- x^2

# Generate scatter plot of (x,y)
plot(x, y)

# Add linear interpolation
lines(x, y)
```





## Graphics {.smaller}
### Plotting functions - Example

- The previous plot was quite rough

- This is because we only computed $y=x^2$ on the grid
$$
x = (-1, -0.5, 0, 0.5, 1)
$$
- We could refine the grid by hand, but this is not practical
- To generate a finer grid we can use the built in R function
    * ``seq()``


## Seq function {.smaller}

``seq(from, to, by, length.out)`` generates a vector containing a sequence:

- ``from`` -- The beginning number of the sequence
- ``to`` -- The ending number of the sequence
- ``by`` -- The step-size of the sequence (the increment)
- ``length.out`` -- The total length of the sequence
  
**Example**: Generate the vector of even numbers from 2 to 20 

```{r}
#| echo: true
x <- seq(from = 2, to = 20, by = 2)
print(x)
```


## Seq function {.smaller}

**Note**: The following commands are equivalent:

- ``seq(from = x1, to = x2, by = s)``
- ``seq(x1, x2, s)``


**Example**: Generate the vector of odd numbers from 1 to 11

```r
x <- seq(from = 1, to = 11, by = 2)
y <- seq(1, 11, 2)

cat("Vector x is: (", x, ")")
cat("Vector y is: (", y, ")")
cat("They are the same!")
```


```{r}
x <- seq(from = 1, to = 11, by = 2)
y <- seq(1, 11, 2)

cat("Vector x is: (", x, ")")
cat("Vector y is: (", y, ")")
cat("They are the same!")
```




## Graphics {.smaller}
### Plotting functions - Example 


- We go back to plotting
$$
y = x^2 \,, \qquad x \in [-1, 1]
$$
- We want to generate a grid, or sequece:
  * Starting at $0$
  * Ending at $1$
  * With increments of $0.2$

```{r}
#| echo: true

x <- seq(from = -1, to = 1, by = 0.2)
print(x)
```



## Graphics {.smaller}
### Plotting functions - Example 


```{r}
#| echo: true
#| 
# Use seq() to generate x grid
x <- seq(from = -1, to = 1, by = 0.2)

# Plot the function y=x^2
plot(x, x^2)
lines(x, x^2)
```




## Graphics {.smaller}
### Scatter plot - Example


Let us go back to the example of plotting random normal values

- First we generate a vector ``x`` with 1000 random normal values
- Then we plot ``x`` via ``plot(x)``
- The command ``plot(x)`` implicitly assumes that:
  * ``x`` is the second argument: Values to plot on $y$-axis
  * The first argument is the vector ``seq(1, 1000)``
  * Note that ``seq(1, 1000)`` is the vector of **components numbers** of ``x``

```{r}
#| echo: true
#| output-location: slide

x <- rnorm(1000)

plot(x)
```




## References